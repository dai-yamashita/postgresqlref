%FILE internal/internal-02.html
%LASTMOD
%KEY pgsql-internal02



%TITLE データベースクラスタ、テーブルの構造

%CHAPTER データベースクラスタ

<p>
物理的なデータ本体や設定ファイルなど、データベースシステムの全データを保存する領域を「データベースクラスタ」と呼びます。
</p>
<p>
データベースクラスタはデータベースシステムの初期化時に指定したディレクトリに作られます。
指定したディレクトリを「ベースディレクトリ」と呼びます。
</p>

<p>
[<表.2-02>]にデータベースクラスタの構造を示します。
</p>

[<表.2-02>] データベースクラスタ直下のファイルとディレクトリ

(本書では"/usr/local/pgsql/data")
<table border=1><tr  bgcolor="#cccccc">
<th>ベースディレクトリ以下のファイル</th>	<th>説明</th>
</tr><tr>
<td>PG_VERSION</td>	<td>PostgreSQLのバージョン番号ファイル</td>
</tr><tr>
<td>pg_hba.conf</td>	<td>ホスト認証設定ファイル。[<3-08>]参照</td>
</tr><tr>
<td>pg_ident.conf</td>	<td>identによる認証ファイル</td>
</tr><tr>
<td>postgresql.conf</td>	<td>パラメータを設定するファイル。4章参照</td>
</tr><tr>
<td>postmaster.opts</td>	<td>起動オプション記録</td>
</tr><tr  bgcolor="#cccccc">

<th>ベースディレクトリ以下のディレクトリ</th>	<th>説明</th>
</tr><tr>
<td>base/</td>	<td>データ領域(データベースのデータを格納する)</td>
</tr><tr>
<td>global/</td>	<td>pg_control(コントロールファイル)やパスワードファイルなど、共通オブジェクトの保存ディレクトリ</td>
</tr><tr>
<td>pg_clog/</td>	<td>CLOG(コミットログ)の保存ディレクトリ(CLOGはすべてのトランザクションのコミット状態を記録する)</td>
</tr><tr>
<td>pg_multixact/</td>	<td>マルチトランザクションの状態を記録する。共有行ロックで使用(バージョン8.1から)</td>
</tr><tr>
<td>pg_notify/</td>	<td>LESTEN/NOTIFYの状態を保存する(バージョン9.0から)</td>
</tr><tr>
<td>pg_serial/</td>	<td>コミットされたシリアライザブルトランザクションに関する情報を保有する(バージョン9.1から)</td>
</tr><tr>
<td>pg_snapshot/</td>	<td>pg_export_snapshot()でエクスポートされたスナップショット情報ファイル。この情報はエクスポートしたトランザクションが終了した際に消去される。(バージョン9.2から)</td>
</tr><tr>
<td>pg_stat_tmp/</td>	<td>統計情報コレクタの一時データを保存する(バージョン9.0から)</td>
</tr><tr>
<td>pg_subtrans/</td>	<td>サブトランザクションの状態を記録する</td>
</tr><tr>
<td>pg_tblspc/</td>	<td>テーブルスペースへのシンボリックリンクを記録する</td>
</tr><tr>
<td>pg_twophase/</td>	<td>2相コミットの状態を記録する。[<6-43>]参照。(バージョン8.1から)</td>
</tr><tr>
<td>pg_xlog/</td>	<td>WALログの保存ディレクトリ</td>
</tr></table>

<br>


<p>
PostgreSQLのデータ領域は、他のRDBMSと大きく異なります。
<br>
OracleやMySQLのInnoDBストレージエンジンはデータ領域を(いくつかの)巨大なファイルとして確保し、
複数のテーブルデータをファイルの内部で一括して管理します。
<br>
これに対しPostgreSQLは、テーブル毎に一つのファイルを確保します。
データベースの物理的な正体はディレクトリで、
テーブルファイルはデータベースに対応するディレクトリ下に置かれます。
</p>


%CHAPTER  テーブルスペース

<p>
テーブルスペースにはテーブルやインデックス、データベースなどを分散して保存できます([<図2-03>])。
</p>

<table border=1>
<caption>[<図2-03>] テーブルスペース</caption>
<tr><td>
<left>
<img src="./fig-2-02-01.jpg"><br>
</left>
</td></tr></table>


<p>
PostgreSQLのテーブルスペースの物理的な正体はディレクトリです。
Oracleのテーブルスペース(表領域)とは、概念的にまったく異なるものなので注意してください。
<br>
「テーブルやインデックスを別のテーブルスペースに配置する」とは、
データベースクラスタと別のディレクトリ以下にテーブルファイルやインデックスファイルを置くことです。
また、「データベースをテーブルスペースに配置する」とは、
テーブルスペース以下にデータベースのサブディレクトリを作成することです。
</p>

</p>
データベースクラスタをひとつのHDDに保存した場合、
アクセスが集中するとHDDのI/Oがボトルネックとなり、結果として性能低下を引き起こす可能性があります。
<br>
テーブルスペースを使ってデータベースやテーブルを別々のHDDに保存すれば、上記の欠点を解消できます。
</p>

%CHAPTER テーブル

<p>
一つのテーブルは、データベースクラスタ以下に一つのファイルとして存在しています。
<br>
テーブルのファイル名はシステムテーブルpg_classを検索すればわかります。
例えば、テーブルsimpletblの実体は次のSELECT文でわかります。
</p>

<pre>
sampledb=# SELECT * FROM simpletbl;
 id |    data    
----+------------
  1 | AAAAAAAAAA
  2 | BBBBBBBBBB
(2 rows)

sampledb=# SELECT datname, oid FROM pg_database 
sampledb-#       WHERE datname = 'sampledb';
 datname  |  oid  
----------+-------
 sampledb | 16384
(1 row)

sampledb=# SELECT relname, relfilenode FROM pg_class 
sampledb-#           WHERE relname = 'simpletbl';
  relname  | relfilenode 
-----------+-------------
 simpletbl |       18740
(1 row)
</pre>

<p>
上の検索結果から、ディレクトリbase/16384がデータベースsampledb、ファイル名"18740"がテーブルsimpletblのデータを保存しているとわかります。
<p>

<pre>
$ ls -la DATABASE_CLUSTER/base/16384/18740
-rw------- 1 postgres users 8192 12月  8 10:14 data/base/16384/18740
</pre>

<p>
バージョン9.0からは関数pg_relation_filepath()で直接ファイル名を表示できます。
</p>

<pre>
sampledb=# SELECT pg_relation_filepath('simpletbl');
 pg_relation_filepath 
----------------------
 base/16384/18740
(1 row)
</pre>

%CHAPTER テーブルデータの構造と空き領域マップ(FSM)

<p>
テーブルやインデックスのデータを保存するファイルの内部は、8192[byte]のブロックに分割されています([<図2-04>])。
データが増えてブロック内に保存しきれなくなると、ファイルの末尾にブロックを追加してファイルサイズを増やします。
</p>

<table border=1>
<caption>[<図2-04>]デーブルデータのブロック構造</caption>
<tr><td>
<left>
<img src="./fig-2-02-02.jpg"><br>
</left>
</td></tr></table>

<br>

<p>
一つのブロックは、ブロックの情報を保存するヘッダ、データへのポインタ(ラインポインタ)、および実際のデータから構成されます。
インデックステーブルの場合は最末尾にSpecial領域としてインデックスに関する特別なデータを保存します。
<br>
テーブルのレコードデータは「ヒープタプル(HeapTuple)」と呼ばれ、ブロックの末尾から書き込みます。
</p>

<p>
以下、テーブルブロックの構成要素について簡単に説明します。
</p>


<ol>

<li>ヘッダ</li>
 <p>
ヘッダの構造体
<a href="javascript:void(0)" id="category_PageHeaderData" onclick="show('PageHeaderData');">PageHeaderData</a>
を[<図2-04>]に図示します[<脚注3>]。
<div id="layer_PageHeaderData" style="display: none;position:relative;margin-left:15pt" class="close">
%INCLUDE PageHeaderData.inc
</div> 
</p>

<p>
構成要素のXLogRecPtrとTimeLineIDはWALとPITRに関係したデータで、[<2-09>]と[<2-10>]で詳しく説明します。
<br>
特にXLogRecPtrの実体である4[byte]の数値の組(xlogid, xrecoff)を「Log Sequence Number(LSN)」と呼びます[<脚注4>]。
簡単にいえばWALログの番地で、WALログの書き込みやリカバリの際に重要な役割を果たします。
</p>

<table>
<caption>[< XLogRecPtrの定義>]</caption>
<tr><td>
<pre>
typedef struct XLogRecPtr
{
   uint32   xlogid;  
   uint32   xrecoff; 
} XLogRecPtr;
</pre>
</td></tr></table>


<blockquote><table BORDER="1"><tr><td>脚注3</td><td>
<p>
PageHeaderDataの定義はsrc/include/storage/bufpage.h。
</p>
</td></tr></table></blockquote>


<blockquote><table BORDER="1"><tr><td>脚注4</td><td>
<p>
XLogRecPtrの定義はsrc/include/access/xlogdef.h。
</p>
</td></tr></table></blockquote>

<p>
pd_lowerはラインポインタの末尾を指し、pd_pupperはヒープタプルを置くデータ領域の先頭を指します。
pg_lowerとpg_upperの指した先の間が、そのブロックの「空き領域」となります。
</p>

<p>
pd_specialは(もし存在すれば)specialの先頭を指します。
pd_pagesize_versionはページのサイズとページ構造のバージョン番号です。
</p>


<li>ラインポインタ</li>
 <p>
ヘッダの次はラインポインタが続きます。各ラインポインタはヒープタプルへのポインタを保持しています。
 </p>

<li>ヒープタプル</li>
 <p>
ヒープタプルの構造は後述します([<2-06>]参照)。
 </p>

</ol>


<p>
参考までに、先のテーブルsimpletblが保存されたファイルの中身を表示します。
ヘッダ部分とラインポインタ、および２つのヒープタプルをみることができます。
</p>


<font color="#ff0000">
書籍の原稿用。表示は下の図のようにする。
</font>

<pre>
$ od -c data/base/16384/18740
0000000  \0  \0  \0  \0 324   V 022 002 001  \0  \0  \0      \0 260 037
0000020  \0     004      \0  \0  \0  \0 330 237   N  \0 260 237   N  \0
0000040  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
*
0017660   4   *  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
0017700 002  \0 002  \0 002  \t 030  \0 002  \0  \0  \0 027   B   B   B
0017720   B   B   B   B   B   B   B  \0   3   *  \0  \0  \0  \0  \0  \0
0017740  \0  \0  \0  \0  \0  \0  \0  \0 001  \0 002  \0 002  \t 030  \0
0017760 001  \0  \0  \0 027   A   A   A   A   A   A   A   A   A   A  \0
0020000
</pre>


<left>
<img src="./fig-2-02-source.jpg"><br>
</left>

<p>
なお、8192[byte]を越える大きなサイズのタプルは"TOAST(The Oversized-Attribute Storage Technique)"という方式で格納管理します。詳細はPostgreSQLのドキュメントを参照してください。
</p>

%SECTION 空き領域マップ(FSM)

<p>
PostgreSQLはタプルを追記する際、空き領域のあるブロックを探して追記します。
空き領域マップはブロック毎にどの程度の空き領域があるかを記録しています。
<br>
バージョン8.3までは空き領域マップの大きさは設定パラメータで指定していました。よって、設定パラメータが不適切な場合は空き領域を保存できないブロックが存在しました。
バージョン8.4からは可変サイズですべてのテーブルの空き領域を保存します。
</p>

<p>
なお、空き領域マップの情報はVACUUM処理が更新します([<2-07>]参照)。
</p>


%CHAPTER データへのアクセス

<p>
データタプルにどうやってアクセスするか、概略を示します([<図2-05>])。
</p>

<table border=1>
<caption>[<図2-05>] タプルへのアクセス</caption>
<tr><td>
<left>
<img src="./fig-2-02-03.jpg"><br>
</left>
</td></tr></table>

<br>

<ul>
<li>シーケンシャルスキャン</li>
<p>
ブロックのラインポインタを順次スキャンしてタプルにアクセスする。
</p>

<li>インデックススキャン</li>
<p>
インデックステーブルもブロック単位で構成され、インデックスはTID(タプルID)とキーから成る。
<br>
インデックススキャンは、TIDからテーブルファイルのブロックと配置された位置を割り出し、
該当テーブル該当ブロックのラインポインタを経由して、目的のタプルに直接アクセスする。
</p>

</ul>

<p>
ちなみにPostgreSQLは、ctidに直接タプルを指定して検索できます。
これを「TIDスキャン」といいます。
例えば'(0,1)'は「第0ブロックの1番目のタプル」という意味です。
</p>

<pre>
sampledb=# SELECT * FROM simpletbl WHERE ctid = '(0,1)';
 id |   data    
----+-----------
  1 | AAAAAAAAA
(1 row)
</pre>

%CHAPTER 参考文献

<ol>
<li>PostgreSQL解析資料 ストレージマネージャ(2)	井久保氏</li>
http://ikubo.x0.com/PostgreSQL/pdf/IK04_Storage2_041214.pdf
<p>
冒頭にテーブルのブロック構造について解説があります。
後半のバッファマネージャの解説はバージョン7.4ベースで、現在と異なるので注意してください。
</p>
</ol>
