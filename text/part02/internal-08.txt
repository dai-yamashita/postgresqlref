%FILE internal/internal-08.html
%LASTMOD
%KEY pgsql-internal08

%TITLE HOT(Heap Only Tuple) とIndex-Only Scan 

%CHAPTER HOT(Heap Only Tuple)

<p>
バージョン8.3で実装されたHOT(Heap Only Tuple)を説明します。
<br>
HOTの主目的はインデックスが張ってあるテーブル更新の効率化です([<脚注23>])。
またHOT導入に際し、ブロック内の不要なタプルを削除する機能も併せて実装されました。
これにより、明示的にVACUUM処理を行う必要性が大幅に減少しました。
</p>


<blockquote><table BORDER="1"><tr><td>脚注23</td><td>
<p>
実際、次の「第１回 HOTの効果」で示されているように、劇的な効果がありました。
</p>
<pre>
http://lets.postgresql.jp/documents/tutorial/hot_1/hot1_2
</pre>
</td></tr></table></blockquote>

<br>

%SECTION HOTの仕組み

<p>
テーブルの更新について説明します。
</p>

%SUBSECTION HOT導入以前

<p>
HOT導入以前、インデックスの張ってあるテーブルを更新する場合は、更新したタプルをブロックに追記するだけでなく、
インデックス側にも"必ず"新たにデータを追記しなければなりませんでした。
<br>
[<図2-38>]で説明すると、テーブルの更新ではテーブルブロックに新たにタプル(図中のタプル3)を追記し、またインデックステーブルにも新たにデータを追加します。
<br>
更新された古いタプル(図中のタプル1)のラインポインタ(図中のラインポインタ1)は、変わらずタプル1を指し続け、
タプル1から更新後のタプル3にリンク(t_ctid)が張られます。このリンクを辿れば、古いタプルから順次新しいタプルを見つけることができます。
</p>

<table border=1>
<caption>[<図2-38>] HOT導入以前の更新</caption>
<tr><td>
<left>
<img src="./fig-2-08-01.jpg"><br>
</left>
</td></tr></table>

<br>


%SUBSECTION HOT導入後


<p>
HOTは更新前のタプルと更新後のタプルが同一ブロックにある場合、
ブロック内のラインポインタにトリックを施してインデックス側を騙します。
<br>
このトリックによって(多くの場合に)インデックスデータの追記無しでデータが更新でき、
結果的に更新の効率が向上します。
<br>
[<図2-39>]で具体的に説明します。
</p>

<table border=1>
<caption>[<図2-39>] HOTによる更新</caption>
<tr><td>
<left>
<img src="./fig-2-08-02.jpg"><br>
</left>
</td></tr></table>

<br>

<p>
(1)更新 [<図2-39>(1)]
</p>

<blockquote>
<p>
タプルを追記する際、更新前のタプルと同じブロックに書き込む場合はインデックスを追記しません。
また、更新前のタプル１のinfomask2にはHEAP_HOT_UPDATEDビットを設定し、
更新後のタプル3のinfomask2にはHEAP_ONLY_TUPLEビットを設定します。
</p>

<p>
古いタプルをアクセスしているトランザクションがある場合、
タプルを更新したトランザクションが実行するのはここまでです。
<br>
この状態で他のトランザクションがタプル3にアクセスするには、次の経路を辿ります。
</p>

<pre>
ラインポインタ1 → タプル1 → (t_ctid経由で) → タプル3
</pre>

</blockquote>


<p>
(2) ラインポインタの更新[<図2-39>(2)]
</p>
<blockquote>


<p> 
古いタプル1をアクセスしているトランザクションがない場合、
ラインポインタ1をタプル１からラインポインタ３に張り替えます(リダイレクトする)。
<br>
ラインポインタを張り替えた後のタプル３へのアクセスは次のようになります。
</p>

<pre>
ラインポインタ１→ (リダイレクト) →ラインポインタ3→ タプル３
</pre>

<p>
ラインポインタの張り替えはエクゼキュータの各種スキャン機能に含まれていて、
SELECTだけでなくUPDATEやDELETEなどでも行う可能性があります。
<br>
あるトランザクションが当該ブロックをシーケンシャルスキャンしたとき、
もしくはHEAP_HOT_UPDATEDビットの設定されたタプルにアクセスしたとき、
他のトランザクションがアクセスしていないなら、張り替えを行います。
</p>


</blockquote>


<p>
以下、HOTが有効な更新例と無効な例を示します。
</p>

<p>
インデックスの張ってあるカラムidをWHERE句の条件としてUPDATE文を実行します。
更新するタプルが含まれるブロックに十分余裕がある間は、そのブロック内にタプルを追記していきます。
このような場合はHOTの効果でインデックステーブルの更新が不要なので、更新処理速度が向上します。
</p>

<pre>
sampledb=# \d hot_test
   Table "public.hot_test"
 Column |  Type   | Modifiers 
--------+---------+-----------
 id     | integer | 
 data   | integer | 
Indexes:
    "hot_idx" btree (id)

sampledb=# -- HOTの効果があるUPDATE
sampledb=# UPDATE hot_test SET data = 2 WHERE id = 1;
UPDATE 1
sampledb=# UPDATE hot_test SET data = 3 WHERE id = 1;
UPDATE 1
</pre>


<p>
一方、インデックスのキーの値を更新するUPDATE文の場合、
インデックステーブルの更新も必須となるので、HOTの効果は得られません。
</p>

<pre>
sampledb=# -- HOT の効果がないUPDATE: インデックスを更新
sampledb=# UPDATE hot_test SET id = 2 WHERE id = 1;
UPDATE 1
</pre>

<p>
稼働統計情報pg_stat_user_tablesで更新におけるHOTの効き具合がわかります。詳細は[<3-18>]HOTの効果確認を参照してください。
</p>


%SECTION 不要なタプル削除と並べ替え

<p>
HOTの効果は絶大ですが、更新前後のタプルが同一ブロック内にある場合のみ有効という制限があります。
HOTの恩栄を受け続けるため、シーケンシャルスキャンやインデックススキャンに一つの機能が加わりました。
<br>
その機能とは、スキャン実行時に該当ブロックの使用率を調べ、
90%(デフォルト)かFILLFACTERで指定した値以上になっていた場合は、
不要なタプルを削除して有効なタプルを並べ替えるというものです。
これは当該ブロックに対するVACUUM処理そのものです([<図2-40>])。
</p>


<table border=1>
<caption>[<図2-40>] 不要なタプル削除と並べ替え</caption>
<tr><td>
<left>
<img src="./fig-2-08-03.jpg"><br>
</left>
</td></tr></table>

<br>

<p>
この機能よってHOTの効果を持続させつつ、VACUUM処理の負担も減らすことができました([<脚注24>])。
</p>

</p>

<blockquote><table BORDER="1"><tr><td>脚注24</td><td>
<p>
VACUUM処理は完全に不要にはなりません。
極端なケースとして、大量データのINSERTやUPDATEを行ったトランザクションをアボートすると、
(このINSERTやUPDATEで書き込まれた本来)不要なタプルがブロック内に残ったままになります。
次のURLの「VACUUMの掃除はもう必要ない？」を参照してください。
</p>
<pre>
http://lets.postgresql.jp/documents/tutorial/hot_2/hot2_2
</pre>

</td></tr></table></blockquote>

<br>

%CHAPTER Index-Only Scan

<p>
バージョン9.2からIndex-Only Scanがサポートされました。
これは、SELECT文の検索項目(ターゲットリスト)がインデックスのkeyのみの場合、テーブルデータへのアクセスを省略する検索方式です([<脚注25>])。
</p>

<blockquote><table BORDER="1"><tr><td>脚注25</td><td>
<p>
OracleではIndex-Only Access(Scan)、MySQLではCovering Indexとして実装されている機能です。
</p>
</td></tr></table></blockquote>

<br>

<p>
例として、以下に示すテーブル:table_zを検索する場合を説明します。
</p>

<pre>
sampledb=# \d table_z
    Table "public.table_z"
 Column |  Type   | Modifiers 
--------+---------+-----------
 pid    | integer | not null
 dat1   | integer | 
 dat2   | integer | 
Indexes:
    "table_z_pkey" PRIMARY KEY, btree (pid)
    "table_z_idx" btree (dat1, dat2)
</pre>

<p>
次のSELECT文の場合、インデックスtable_z_idxのみアクセスすれば事足りるようにみえます。
なぜならインデックステーブルtable_z_idxのキーは(dat1, dat2)の組なので、dat1でインデックススキャンすれば自動的にdat2も得られるからです。
</p>

<pre>
SELECT dat1, dat2 FROM table_z WHERE dat1 BETWEEN 10 AND 20; 
</pre>


<p>
しかし、ひとつ問題があります。
インデックスの先にあるタプルがそのトランザクションから可視かどうかは、実際にテーブルデータにアクセスしなければわかりません。
ここでテーブルデータにアクセスしては本末転倒なので、何らかの工夫が必要になるのです。
<br>
結論をいえば「ビジビリティマップをみて、ブロック内部の全タプルが可視(All Visible)のブロックはIndex-Only Scanを、それ以外は通常のテーブルアクセスを行う」ことで解決しました。
</p>

<p>
よってIndex-Only Scanは、
「更新が少なくほとんどの操作が検索であるテーブルに対し、比較的広範囲の検索を行う場合に有効」と思われます。
検索範囲が広いほどテーブルデータへのアクセスが発生しない分、検索性能が向上するためです。
</p>

%CHAPTER 参考文献

<ol>
<li>第１回 HOTの効果(1)	笠原氏</li>
http://lets.postgresql.jp/documents/tutorial/hot_1/hot1_1
<li>第１回 HOTの効果(2)	笠原氏</li>
http://lets.postgresql.jp/documents/tutorial/hot_1/hot1_2
<li>第２回 HOTの仕組み(1)	笠原氏</li>
http://lets.postgresql.jp/documents/tutorial/hot_2/hot2_1
<li>第３回 HOTの上手な使い方(1)	笠原氏</li>
http://lets.postgresql.jp/documents/tutorial/hot3/hot3_1
</ol>

<p>
仕組みからベンチマークまで幅広く解説しています。本書も図の表現方法を含め、参考にしました。
</p>
