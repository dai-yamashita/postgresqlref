%FILE internal/func-12.html
%LASTMOD
%KEY pgsql-func12

%TITLE バックアップとリカバリ制御関数


[< WALログ管理関数一覧>]

<table><tr bgcolor="#cccccc">
<th>関数</th>							<th>返り値型</th>	<th>説明</th>	<th>実行側</th>

</tr><tr>
<td>pg_switch_xlog()</td>	<td>	text	</td>	<td>	新しいWALログファイルに切り替え</td> <td>マスタ</td>
</tr><tr>

<td>pg_current_xlog_location()</td>	<td>	text	</td>	<td>	現在のWALログの書き込み位置(LSN)</td> <td>マスタ</td>
</tr><tr>
<td>pg_current_xlog_insert_location()</td>	<td>	text</td>	<td>	現在のWALログの挿入位置(LSN)</td> <td>マスタ</td>
</tr><tr>

<td>pg_xlogfile_name_offset(location text)</td>	<td>	text, integer</td>	<td>	WALログの位置を表す文字列を、ファイル名とファイル内の10進のバイトオフセットに変換</td> <td>マスタ</td>
</tr><tr>
<td>pg_xlogfile_name(location text)</td>	<td>	text	</td>	<td>	WALログの位置を表す文字列をファイル名に変換</td> <td>マスタ</td>

</tr><tr>
<td>pg_xlog_location_diff(location text, location text)	   </td>	<td>numeric </td>	<td>LSNの差を返す。バージョン9.2から</td> <td>マスタ</td>

</tr></table>

<br>


[<ベースバックアップ制御関数一覧>]

<table><tr bgcolor="#cccccc">
<th>関数</th>							<th>返り値型</th>	<th>説明</th>	<th>実行側</th>
</tr><tr>
<td>pg_start_backup(label text [, fast boolean ])</td>	<td>text</td>	<td>		オンラインバックアップ開始前に実行</td> <td>マスタ</td>
</tr><tr>
<td>pg_stop_backup()</td>	<td>	text	</td>	<td>オンラインバックアップ終了後に実行</td> <td>マスタ</td>

</tr><tr>
<td>pg_is_in_backup()</td>	<td>bool</td>	<td>(pg_start_backup()やpg_basebackupが実行されて)バックアップ実行中か否か。バージョン9.3から</td> <td>マスタ</td>

</tr><tr>
<td>pg_create_restore_point(LSN text)	</td>	<td>text</td>	<td>この関数を実行したLSNまでリカバリする。詳細は[<3-21>]参照。バージョン9.1から</td> <td>マスタ</td>


</tr><tr>
<td>pg_backup_start_time() </td>	<td>timestamp with time zone</td>	<td>バックアップの開始時刻(i.e. pg_start_backup()やpg_basebackupが実行された時刻)を取得。もしもバックアップ実行中でなければ空文字が返る。バージョン9.3から</td> <td>マスタ</td>

</tr></table>

<br>


[<リカバリ情報関数一覧>]

<table><tr bgcolor="#cccccc">
<th>関数</th>							<th>返り値型</th>	<th>説明</th>	<th>実行側　　</th>
</tr><tr>
<td>pg_is_in_recovery()		</td>	<td>boolean	</td>	<td>リカバリ中ならばtrueを返す</td>	<td>マスタ<br>/スレーブ</td>

</tr><tr>
<td>pg_last_xlog_receive_location()	</td>	<td>text	</td>	<td>受信して<u>HDDに書き込んだWALログのLSN</u></td>	<td>スレーブ</td>

</tr><tr>
<td>pg_last_xlog_replay_location()	</td>	<td>text	</td>	<td>受信してHDDに書き込み、さらに再生(replay)したWALログのLSN</td>	<td>スレーブ</td>

</tr><tr>
<td>pg_last_xact_replay_timestamp()	    </td>	<td>timestamp with TZ	</td>	<td>再生(replay)したWALログが、マスタ側で実行された時刻。バージョン9.2から</td>	<td>スレーブ</td>

</tr></table>

<br>

[<リカバリ制御関数一覧>]


<table><tr bgcolor="#cccccc">
<th>関数</th>							<th>返り値型</th>	<th>説明</th>	<th>実行側</th>
</tr><tr>
<td>pg_is_xlog_replay_paused()</td>	<td>boolean</td>	<td>再生(replay)が停止中であればtrueを返す</td>	<td>スレーブ</td>
</tr><tr>
<td>pg_xlog_replay_pause()	</td>	<td>void</td>	<td>即座に再生(replay)を停止する</td>	<td>スレーブ</td>
</tr><tr>
<td>pg_xlog_replay_resume()	</td>	<td>void</td>	<td>再生(replay)停止中であれば再開する </td>	<td>スレーブ</td>
</tr></table>

<br>


%CHAPTER 解説


<p>
・pg_start_backup()、pg_stop_backup()、pg_create_restore_point()
<br>
ベースバックアップを取得するための関数です。使い方は[<2-10>]、[<3-21>]を参照してください。
</p>


<p>
・pg_xlogfile_name_offset()、pg_xlogfile_name()、pg_xlog_location_diff()
<br>
LSN(Log Sequence Number)からWALログのファイル名やオフセットを得ることができます。
これらはWALログの管理用関数です。
</p>

<pre>
sampledb=# SELECT pg_xlogfile_name_offset('0/F000074');
    pg_xlogfile_name_offset     
--------------------------------
 (00000001000000000000000F,116)
(1 row)

sampledb=# SELECT pg_xlogfile_name('0/F000074');
     pg_xlogfile_name     
--------------------------
 00000001000000000000000F
(1 row)

sampledb=# SELECT pg_xlog_location_diff('0/F0001B0', '0/F000074');
 pg_xlog_location_diff 
-----------------------
                   316
(1 row)
</pre>


<p>
・pg_last_xlog_receive_location()
<br>
pg_last_xlog_receive_location()は受信してHDDに書き込んだWALログのLSNを返します。
"receive"という関数名ですが、返す値は書き込んだLSNなので注意してください。
</p>


<p>
・pg_xlog_replay_pause()、pg_xlog_replay_resume()
<br>
これらの関数を使うと、スレーブ側で明示的に再生(replay)を停止できます。
</p>


<hr>
<hr>
<hr>

<pre>

CREATE SLOT
testdb=# SELECT * FROM pg_create_physical_replication_slot('a_slot');
 slot_name | xlog_position 
-----------+---------------
 a_slot    | 
(1 row)



CEHCK
testdb=# SELECT slot_name, active FROM pg_replication_slots;
 slot_name | active 
-----------+--------
 a_slot    | f
(1 row)

testdb=# 
testdb=# SELECT slot_name, active FROM pg_replication_slots;
 slot_name | active 
-----------+--------
 a_slot    | t
(1 row)

testdb=# SELECT * FROM pg_replication_slots;
 slot_name | plugin | slot_type | datoid | database | active | active_pid | xmin | catalog_xmin | restart_lsn 
-----------+--------+-----------+--------+----------+--------+------------+------+--------------+-------------
 a_slot    |        | physical  |        |          | t      |      11755 |      |              | 0/20048678
(1 row)


testdb=# SELECT  pg_drop_replication_slot('a_slot'); --- slave側を停止しないと、実行できない。
ERROR:  replication slot "a_slot" is already active for PID 14611
STATEMENT:  SELECT  pg_drop_replication_slot('a_slot');
ERROR:  replication slot "a_slot" is already active for PID 14611
testdb=# 
testdb=# 
testdb=# 
testdb=# SELECT  pg_drop_replication_slot('a_slot');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

</pre>
