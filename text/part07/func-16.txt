%FILE internal/func-16.html
%LASTMOD
%KEY pgsql-func16

%TITLE サーバシグナル送信関数

[<サーバシグナル送信関数一覧>]
<pre>
表9.67 サーバシグナル送信関数
関数   戻り型	説明
pg_cancel_backend(pid int)	boolean	バックエンドの現在の問い合わせを取り消す
pg_reload_conf()      boolean	設定ファイルpostgresql.confを再読み込みする
pg_rotate_logfile()   boolean	サーバログファイルを切り替える
pg_terminate_backend(pid int) 	boolean	バックエンドを終了する
</pre>


%CHAPTER 解説

<p>

上に示したサーバシグナル送信関数はそれぞれ、実行中の処理を取り消す、設定ファイルpostgresql.confファイルの設定を再読み込みする、ログファイルを切り替える、実行中のバックエンドプロセスを終了させます。
</p>

<p>
「サーバシグナル送信関数」という命名は、これらの機能をどのように実行するかという観点から行われたもので、内部構造を熟知しなければ理解できないものです。つまり、あまり良い命名ではありません。
</p>

<p>
・pg_cancel_backend(),pg_terminate_backend()
<br>
pg_cancel_backend()とpg_terminate_backend()は、それぞれSIGINTまたはSIGTERMシグナルを対象とするプロセスに送り、
実行中の処理を取り消すか、プロセスそのものを終了させます。
</p>

<p>
以下に実行例を示します。
</p>

<p>
Unixプロセスidが24018である、バックエンドプロセスでpg_sleep()関数を実行します。
</p>

<pre>
testdb=# SELECT pg_backend_pid();
 pg_backend_pid 
----------------
          24018
(1 row)

testdb=# SELECT pg_sleep(100);
</pre>

<p>
別のバックエンドプロセスからpg_cancel_backend()関数を使って、pg_sleep()関数の実行を取り消します。
</p>

<pre>
testdb=# SELECT pg_cancel_backend(24018);
 pg_cancel_backend 
-------------------
 t
(1 row)
</pre>

<p>
以下に示すように、pg_sleep()を実行していたバックエンドプロセスは、その処理を取り消します。
</p>

<pre>
testdb=# SELECT pg_sleep(100);
ERROR:  canceling statement due to user request
</pre>


<p>
・pg_reload_conf()
<br>
pg_reload_conf()関数はサーバにSIGHUPシグナルを送り、全てのサーバプロセスに設定ファイルpostgresql.confの値を再読み込みさせます。これはpg_ctlをreloadオプションで実行するのと同じです。
</p>

