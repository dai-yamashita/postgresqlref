%FILE internal/app-01.html
%LASTMOD
%KEY pgsql-app01


%TITLE pgpool-II

<p>
pgpool-IIは同期レプリケーション機能をはじめ、コネクションプール機能や負荷分散機能を提供するPostgreSQL専用のミドルウエアです。
</p>

<table border=1>
<caption>[<表A-01>] pgpool-IIの歴史</caption>
<tr bgcolor="#cccccc">
<th>プロダクト</th>  <th>バージョン</th>  <th>リリース時期</th>  <th>主な追加機能</th>
</tr><tr>
<td rowspan=2>pgpool</td>  <td>ver1</td>  <td>2004.4</td>  <td>コネクションプール機能、(2台による)同期レプリケーション機能</td>
</tr><tr>
<td>ver2</td>  <td>2004.6</td>  <td>負荷分散機能</td>
 
</tr><tr>

<td rowspan=3>pgpool-II</td> <td>ver1</td>  <td>2006.9</td>  <td>パラレルクエリ、2台以上の同期レプリケーション機能</td>

</tr><tr>
 <td>ver2</td>  <td>2007.11</td>  <td>オンラインリカバリ</td>

</tr><tr>

  <td>ver3</td>  <td>2010.9</td>  <td>PostgreSQLのStreamingReplicationに対応</td>

</tr></table>

<br>

<p>
PostgreSQLのコネクションプールサーバとして誕生したpgpoolは、
非常に早い段階で同期レプリケーションを実装しました。
以降、負荷分散(ロードバランス)やパラレルクエリなど機能拡張を続けて現在に至ります。
</p>

<p>
pgpool-IIバージョン3がサポートしている４モードのうち、以下の2モードを説明します。
<br>
なお、以降pgpool-IIの説明ではPostgreSQLサーバを「ノード」と記述します。
</p>


<table BORDER=1>
<caption>[<図A-01>] レプリケーションモードとマスタスレーブモード</caption>
<tr><td><center>
<img src="./fig-A-01-01.jpg"><br>
</center></td></tr>
</table>

<br>

<p>
(1) レプリケーションモード
</p>
<blockquote>
<p>
更新系SQLは全ノードで実行し、検索系SQLは一つのノードで実行します。
これにより同期レプリケーションと負荷分散(ロードバランス)を同時に実現します。
<br>
2台以上のノードを接続できます。
</p>
</blockquote>

<p>
(2) マスタスレーブモード
</p>
<blockquote>
<p>
PostgreSQLのレプリケーション機能のフロントエンドとして機能します。
<br>
Streaming ReplicationやSlony-Iなど、1マスタNスレーブ方式のレプリケーションを利用する場合、
通常はアプリケーション側が更新系SQLと検索系SQLでアクセスするノードを分けなければなりません。
<br>
マスタスレーブモードのpgpool-IIは、
更新系と検索系でアクセスするノードを自動的に振り分けるので、
アプリケーションはレプリケーションサーバの存在を意識する必要がありません。
</p>
</blockquote>


<p>
具体的な設定方法や内部構造の解説は、以下の筆者のサイトを参照してください。
</p>

<pre>
	http://www.interdb.jp/techinfo/postgresql#pgpool
</pre>


%CHAPTER 動作機構と主な機能

%SECTION 動作機構

<p>
レプリケーションモードを例として、pgpool-IIの動作機構を簡単に説明します。
</p>


<table BORDER=1>
<caption>[<図A-02>] pgpool-IIの動作</caption>
<tr><td><center>
<img src="./fig-A-01-02.jpg"><br>
</center></td></tr>
</table>

<br>

<p>
PostgreSQL、pgpool-IIとも構造的にはマルチプロセス型のプログラムです。
<br>
クライアントからの接続要求に対してpgpool-IIはchildプロセスを立ち上げ、
そのプロセスがPostgreSQLにコネクションを張ります。
</p>

<p>
Grayらの分類[<脚注1>]に当てはめると、pgpool-IIはEagerレプリケーションに該当します。
すなわち、各SQL文をすべてのノードに同期的に配送します。
<br>
例えば[<図A-02>]においてpgpool-IIのプロセスは、
クライアントから受信したINSERT文を２つのノードに同時に送ります。
そして双方のノードからレスポンスが返った後、クライアントにレスポンスを返します。
</p>


<p>
本節の目的は耐障害性の解説なので、
ノード間のデータ一貫性(Consistency)を確保する機構の詳細には立ち入りません。
唯一、故障検出に関連した機構のみ後述します。
その他についてはpgpool-IIの公式ドキュメントなどを参照してください。
</p>

<blockquote><table BORDER="1"><tr><td>脚注1</td><td>
<p>
J. Gray, P. Helland, P. O’Neil, and D. Shasha. The dangers of replication and a solution. In ACM SIGMOD, pages 173–182, 1996.
</p>
<pre>
ftp://ftp.research.microsoft.com/pub/tr/tr-96-17.pdf
</pre>

</td></tr></table></blockquote>



%SECTION 耐障害性に関係する機能

<p>
pgpool-IIがサポートする各種機能のうち、耐障害性に関係する機能を列挙します。
</p>

<ol>
<li>フェールオーバ</li>
 <p>
接続しているノードが故障した場合、速やかに切り離して(縮退して)、サービスを継続する。
 </p>

<li>オンラインリカバリ</li>
 <p>
稼働中のpgpool-IIに新たにノードを追加する。フェールオーバで縮退したシステムの復旧で用いる。
 </p>

</ol>


<p>
以降、この２つの機能について説明します。
</p>


%CHAPTER 故障検出とフェールオーバ

<p>
PostgreSQLはマルチプロセスのプログラムなので、
postgresプロセス単体の故障と、ノード(サーバ本体)の故障を区別しなければなりません。
</p>

<table BORDER=1>
<caption>[<図A-03>] ノード故障とプロセス故障</caption>
<tr><td><center>
<img src="./fig-A-01-03.jpg"><br>
</center></td></tr>
</table>

<br>

<p>
はじめにプロセス単体の故障検出条件とノードの故障検出条件について説明します。
次にノード故障を検出してフェールオーバする条件を述べます。
</p>


%SECTION postgresプロセスの故障検出条件


<p>
postgresプロセスを故障として検出する条件を列挙します。
</p>

<ol>
<li>postgresプロセスから読み出しに失敗した場合</li>
<p>
postgresプロセスと接続に使用しているソケット(socket)から読み出し(read)に失敗した場合、
故障とみなす。
</p>

<li>"fail_over_on_backend_error=off"且つ、postgresプロセスに書き込み失敗した場合</li>
<p>
同様にソケットに書き込み(flush)を失敗した場合、故障とみなす。
ただし、パラメータfail_over_on_backend_error=offの場合に限る。onの場合はノード故障とみなす。
</p>

</ol>


<p>
pgpoolのchildプロセスがpostgresプロセスの故障を検出したら、
一旦すべてのセッションを切断して、再接続します([<図A-03>](1)参照)。
<br>
再接続に失敗したらノード故障と判定します。
</p>


%SECTION ノード故障の検出条件


<p>
ノードを故障と判断する条件を列挙します。
</p>

<ol>
<li>postgresプロセスに接続できない場合</li>
<p>
接続できない場合はノード故障とみなす。
</p>


<li>ノードがダウンしたことを検出した場合</li>
 <p>
PostgreSQLは正常に停止するか、自ら異常を検出して停止する際、
エラーメッセージ(ERRCORE_ADMIN_SHUTDOWN or ERRCODE_CRASH_SHUTDOWN)を送信して接続を切る。
 <br>
pgpool-IIのchildプロセスがこれらのエラーメッセージを受信した場合、ノード故障とみなす。
 <br>
pgpool-IIはノードがオペレーションとして停止したのか、なんらかの異常で停止したのかは気にしない(Don't Care)。
 </p>


<li>"fail_over_on_backend_error=on"且つ、postgresプロセスに書き込み失敗した場合</li>
<p>
(プロセス故障でふれたが、)パラメータfail_over_on_backend_errorがonの場合、
postgresプロセスのソケットに書き込み(flush)失敗したらすぐにノード故障とみなす。
</p>


<li>SQLのレスポンスが異なる場合</li>

 <p>
pgpool-IIは次に示すSQL実行レベルのエラー検出を行う。
<br>
これはノード間のデータ一貫性(Consistency)確保のためで、
少数派のノード群を故障とみなす。
多数決できない場合は若いノード番号を含むグループを優先する。
 </p>

 <p>
 <ol>
  <li>SQLエラー</li>

<p>
パラメータreplication_stop_on_mismatch=onで、
例えばINSERT文でノード1は成功、ノード2は"テーブルが存在しない"などエラーが返った場合、
ノード2を故障とみなす。
<br>
パラメータがoffの場合はpostgresプロセスの故障とみなす(ノード故障とはみなさない)。
</p>

  <li>更新系SQL(UPDATE/DELETE/INSERT)の更新行数が異なる</li>

<p>
パラメータfailover_if_affected_tuples_mismatch=onで、
更新系SQLの返り値が異なる場合、少数派のノードを故障とみなす。
<br>
パラメータがoffの場合はpostgresプロセスの故障とみなす(ノード故障とはみなさない)。
</p>

 </ol>

 </p>

<li>health_check(ヘルスチェック)で異常を検出した場合</li>
 <p>
設定パラメータhealth_check_periodで指定した時間間隔で定期的に全ノードにアクセスを試みる。
<br>
health_check(ヘルスチェック)は接続の健全性を調べ、
次の場合は"故障"と判断する:
 <ul>
  <li>ネットワーク的に接続できない</li>
  <li>ノードがアクセスを拒否</li>
  <li>設定パラメータhealth_check_timeout以内に応答がない</li>
 </ul>
 </p>

</ol>


%SECTION 故障検出とフェールオーバ

<p>
pgpool-IIがノード故障を検出すると、
設定パラメータfailover_commandに設定したスクリプトを実行してシステムをフェールオーバします。
<br>
通常このスクリプトには、
システムを縮退運転モードに移行するための一連のコマンドを列挙します。
</p>

<p>
ただしこのスクリプトが実行されるのは、
設定パラメータbackend_flagNの値が'ALLOW_TO_FAILOVER'のノードが故障した場合のみです。
<br>
backend_flagNの値が'DISALLOW_TO_FAILOVER'の場合、
そのノードが故障してもfailover_commandのスクリプトを実行しません(フェールオーバしない)。
この設定(DISALLOW_TO_FAILOVER)は、Pacemakerなどの監視ツールにフェールオーバ制御を委ねるシステム構成で利用します。
</p>



%CHAPTER オンラインリカバリ

<p>
pgpool-IIのオンラインリカバリの仕組みを簡単に解説します。
詳細な解説は末尾の情報源を参照してください。
</p>



<p>
pgpool-IIのオンラインリカバリは、2つのフェーズに分かれています。
</p>

<blockquote>
フェーズ1
<p>
リカバリ元のベースバックアップを転送する。
</p>

フェーズ2
<p>
フェース1の作業中に更新されたアーカイブログを転送し、
先に転送されたベースバックアップと合わせてリカバリする。
</p>
</blockquote>

<table BORDER=1>
<caption>[<図A-04>] pgpool-IIのオンラインリカバリ</caption>
<tr><td><center>
<img src="./fig-A-01-04.jpg"><br>
</center></td></tr>
</table>

<br>

<p>
フェーズ１の最中はデータ操作が可能です。
<br>
フェーズ1の最中に更新されたデータは、フェーズ2でアーカイブログとして転送し、
リカバリするサーバに反映します。
</p>

<p>
なお、pgpool-IIは
フェーズ2に入る前に全トランザクションが終了するのを待ちます。
これは、すべてのセッションを切断して初期化するためです。
<br>
pgpool-IIの機構からも解るように、
全セッションの初期化によって、
リカバリ後は全ノードが同一条件で更新を再開します。
</p>

<p>
フェーズ2の間はデータベースアクセスができません。
しかしフェーズ2の時間は非常に短いです。
<br>
フェーズ2にかかる時間は、アーカイブログの転送時間とPostgreSQLサーバの起動にかかる時間の和です。
</p>



%CHAPTER 単一障害点(Single Point of Failure)の解消

<p>
pgpool-IIの最も大きな弱点は、pgpool-IIが単一障害点(Single Point of Failure)となることです。
<br>
これを避けるには、pgpool-IIを二重化してアプリケーションかロードバランサで負荷分散させるか、
pgpool-haとPacemakerで冗長化させるなどの方法があります。
<br>
pgpool-haに関する情報は以下を参照してください。
ただし、改良の余地が多く残っているので、使用に関しては十分な検討が必要です。
</p>

<pre>
http://pgpool.sraoss.jp/index.php?pgpool-HA
</pre>

<p>
2012年8月リリースのバージョン3.2においてWatchdog機能を内蔵しました。
</p>

<pre>
http://www.pgpool.net/pgpool-web/contrib_docs/watchdog/ja.html
</pre>

<p>
一般に高可用性に関わる機能実装は、長い時間をかけて細かな不具合を改善しつづけることが必要です。
この機能が安定するまで、しばらく時間がかかると思われるので、使用に関しては十分に検討を行ってください。
</p>

%CHAPTER 情報源

<p>
pgpool-IIに関する情報源を以下に示します。
</p>

<ul>
<li>http://pgfoundry.org/projects/pgpool/</li>
 <p>
pgpool-IIのサイトです。
 </p>

<li>http://www.interdb.jp/techinfo/postgresql/index.html#pgpool</li>

 <p>
筆者のpgpool-IIに関するサイトです。
レプリケーションモード、マスタスレーブモードの設定方法、
pgpool-IIの内部構造など解説しています。

 </p>

</ul>







