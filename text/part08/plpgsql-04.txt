%FILE internal/plpgsql-04.html
%LASTMOD
%KEY pgsql-plpgsql04

%TITLE SELECT INTO文


<pre>
1行を返す（多分、複数列の）SQL コマンドの結果は、レコード変数、行型の変数、スカラ変数のリストに代入することができます。これは、基本的なSQL コマンドを記述して、それにINTO句を追加することによって行われます。以下に例を示します。

SELECT select_expressions INTO [STRICT] target FROM ...;
INSERT ... RETURNING expressions INTO [STRICT] target;
UPDATE ... RETURNING expressions INTO [STRICT] target;
DELETE ... RETURNING expressions INTO [STRICT] target;

ここで、targetはレコード変数、行変数、あるいは、単純な変数とレコード/行変数のフィールドをカンマで区切ったリストです。 PL/pgSQL変数は置換されて、通常の問い合わせの残りと同じになります。このように作動するのは、RETURNINGを伴ったINSERT/UPDATE/DELETEとSELECTおよび行セットの結果を返すユーティリティコマンド（例えば、EXPLAIN）です。 INTO句以外では、SQL コマンドはPL/pgSQLの外部に記述したものと同じです。

    ティップ: 通常のPostgreSQLのSELECT INTO文では、INTOの対象は新しく作成されるテーブルです。しかし、INTOを伴ったSELECTでは、この解釈が通常と大きく異なることに注意してください。 PL/pgSQL 関数内部でSELECTの結果からテーブルを作成したい場合は、CREATE TABLE ... AS SELECT構文を使用してください。 

行または変数リストが対象に使用された場合、列数とデータ型において問い合わせの結果と対象の構造が正確に一致しなければなりません。さもないと、実行時エラーが発生します。レコード変数が対象の場合は、問い合わせ結果の列の行型に自分自身を自動的に設定します。

INTO句以外は、このSELECT文は通常のSELECT SQLコマンドと同一であり、SELECTの全ての機能を使用することができます。

INTO句はSQLコマンドのほとんど任意の場所に記述することができます。習慣的には、SELECT文においてはselect_expressionsの直前または直後に、他のコマンドにおいては文の終わりに記述されます。将来PL/pgSQLのパーサが厳格になる場合に備えて、この習慣に従うことを推奨します。

STRICTが指定されない場合、targetは問い合わせが返す最初の行となり、行を返さないときはNULLとなります。（"t最初の行"とはORDER BYを使用しないと定義できないことに注意してください。） 2行目以降の行の結果は、全て破棄されます。特殊なFOUND変数を調べて、どの行が返されたか知ることができます。（項37.6.6を参照してください）以下に例を示します。

SELECT * INTO myrec FROM emp WHERE empname = myname;
IF NOT FOUND THEN
    RAISE EXCEPTION 'employee % not found', myname;
END IF;

STRICTオプションが指定された場合、問い合わせは正確に 1行を返さなければなりません。さもないと、行がないときはNO_DATA_FOUND、2行以上が返ったときはTOO_MANY_ROWSの実行時エラーが生じます。エラーを捕捉したいときは、例外ブロックを使用できます。以下に例を示します。

BEGIN;
    SELECT * INTO STRICT myrec FROM emp WHERE empname = myname;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'employee % not found', myname;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'employee % not unique', myname;
END;

STRICTを指定したコマンドが成功するためには、FOUND変数を常に真に設定してください。

STRICTが指定されない場合でも、RETURNINGを伴ったINSERT/UPDATE/DELETEが2行以上を返したときは、エラーとなります。なぜなら、どの1行を返すか決定するORDER BYのようなオプションが存在しないからです。

    注意: STRICTオプションは、OracleのPL/SQLのSELECT INTOおよび関連した文に対応します。 

SQLの問い合わせが返す複数行の結果を処理したい場合は、項37.7.4を参照してください。 
</pre>


<pre>
[<書式]>

SELECT INTO target [, target, ... ] expressions [, expressions, ...] FROM ... 

========================================================================
引数		説明
========================================================================
target		record変数、行変数、列変数
expressions	SELECT文で取り出すテーブルの列名、もしくは式
========================================================================
</pre>

[<解説>]

<p>
SELECT INTO文を使い、任意のテーブルの行データをレコード変数、行変数、列変数に代入できます。INTO句を除き、PL/pgSQLのSELECT INTO文は通常のSELECT文と同一であり、SELECT文のすべての機能を使用できます。
注意しなければならないのは、
PL/pgSQLのSELECT INTO文はテーブルのデータ1行のみ代入できる点です。
---under-line---under-line---under-line---under-line---under-----
</p>

<p>
SELECT INTO文が複数の行を返す場合、最初の行が変数に代入され、残りは破棄されます。SELECT INTO文が検索行を返さない場合(0行を返す場合)、NULL値が変数に代入されます。
</p>

<p>
複数行の検索結果を処理したい場合は、次のいずれかを方法を利用してください。
</p>

<pre> 複数行を処理する方法
(1) FOR IN LOOP文、FOR IN EXECUTE LOOP文を使う([<8-15>]参照)
(2) PL/pgSQLのカーソルを利用する([<8-16>]参照)
</pre>

<p>
・変数 FOUND <br>
boolean型変数のFOUNDを検査することで、SELECT INTO文が変数に値を代入できたか否か知ることができます。
</p>

[<実行例>]

<p>
・変数 FOUND の利用<br>
関数select_into_sample()は、テーブルcustomerlistを検索し、結果が得られた場合にはその結果を、結果が得られない場合には"Data not found."という文字列を出力します。
</p>

<pre> バージョン8.0以降の定義
CREATE FUNCTION select_into_sample (idx int) RETURNS text AS
 $$
  DECLARE
    customer_name text;
  BEGIN
    SELECT INTO customer_name name FROM customerlist WHERE id = idx;
    IF FOUND THEN
      RETURN customer_name;
    ELSE
      RETURN 'Data not found.';
    END IF;
  END;
 $$
LANGUAGE PLpgSQL;
</pre>

<p>
実行例を示します。
</p>

<pre>
sampledb=# SELECT select_into_sample (1);
 select_into_sample 
--------------------
 デューク東郷
(1 row)

sampledb=# SELECT select_into_sample (-1);
 select_into_sample 
--------------------
 Data not found.
(1 row)
</pre>
