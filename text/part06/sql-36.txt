%FILE internal/sql-36.html
%LASTMOD
%KEY pgsql-sql36

%TITLE VIEW(ビュー)の定義と削除	CREATE VIEW / DROP VIEW 

<pre>
[<書式>]
● ビューの定義
CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW 
	 view_name [ ( column_name_list ) ] AS SELECT query 
       [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]

● ビューの削除
DROP VIEW [ IF EXISTS ] view_name [, ...] [ CASCADE | RESTRICT ] 

● マテリアライズドビューの定義	 (バージョン9.3から)
CREATE MATERIALIZED VIEW [ IF NOT EXISTS ] view_name
    [ (column_name [, ...] ) ]
    [ WITH ( storage_parameter [= value] [, ... ] ) ]
    [ TABLESPACE tablespace_name ]
    AS query
    [ WITH [ NO ] DATA ]

● マテリアライズドビューの更新	 (バージョン9.3から)
REFRESH MATERIALIZED VIEW [ CONCURRENTLY ] view_name
    [ WITH [ NO ] DATA ]

● マテリアライズドビューの削除	 (バージョン9.3から)
DROP MATERIALIZED VIEW [ IF EXISTS ] view_name [, ...] [ CASCADE | RESTRICT ]

=============================================================
パラメータ		説明
=============================================================
view_name		定義、または削除するビューの名前
column_name_list	ビューのカラム
query			ビューのもとになるSELECT文
=============================================================

=============================================================
オプション	説明
=============================================================
OR REPLACE	すでに同名のビューが存在する場合、新たに再定義する
TEMP, TEMPORARY	一時的なビューとして作成する。バージョン8.1から

CASCADED
LOCAL
CHECK OPTION
IF NOT EXISTS

IF EXISTS	削除するビューが存在しなくともエラーを返さない。バージョン8.2から
CASCADE		ビューに依存するオブジェクト(関数など)も一緒に削除
RESTRICT	依存するオブジェクトのないビューのみ削除
CONCURRENTLY	マテリアライズドビューをREFRESHしている間も、他のセッションでSELECT文が実行できる(SELECT文の実行をロックしない)。
=============================================================
</pre>

%CHAPTER 解説

<p>
ビューとはあるテーブルの一部だけを表示したり、複数のテーブルの結合を表示するために使う、便宜的なものです。
PostgreSQLではルールシステムにSELECT文を保存し、ビューが呼び出される毎に保存されたSELECT文を実行することでビューを実現しています。
</p>

<p>
・更新可能ビュー<br>
上記のような仕組みでビューを実現していたため、バージョン9.2までのビューは読み取り専用でしたが、バージョン9.3からビューに対する更新(INSERT, UPDATE, DELETE)が可能になりました。ただし更新可能なビューであるためには多くの制約があります。以下にそれらを列挙します。
</p>

<ul>
<li>ビューのFROMリストでは正確に１つの項目を持たなければならず、それはテーブルまたは他の更新可能ビューでなければならない。</li>
<li>    ビューの定義の最上位レベルにおいてWITH、DISTINCT、GROUP BY、HAVING、LIMIT、OFFSETを含めてはならない。</li>
<li>    ビューの定義の最上位レベルにおいて集合操作（UNION、INTERSECT、EXCEPT）を含めてはならない。</li>
<li>    ビューの選択リスト内の列はすべて基となるリレーションの列に対する単純な参照でなければならない。 式、リテラル、関数は設定できない。システム列も参照することができない。</li>
<li>    ビューの選択リストにおいて元となるリレーションの列を複数回記述することができない。</li>
<li>    ビューはsecurity_barrier属性を持ってはならない。 </li>
</ul>

<p>
念のため追記すると、生成するビューが更新できなくとも良い場合、つまりバージョン9.2までの旧来のビューで良い場合は、上記の制約に縛られず自由にビューを生成できます。
</p>

<p>
・マテリアライズドビュー<br>
バージョン9.3からマテリアライズドビューもサポートされました。
</p>

<p>
マテリアライズドビューとは(論理的な存在であるビューとは異なり)実際にビューを物理的なテーブルとして作成し、主にSELECTの実行性能を向上させる機能です。物理的にビューを生成するので、元になるテーブルが更新されてもビューの結果には反映されません。元テーブルの更新を反映させるにはFRESH MATERIALIZED VIEW文を明示的に実行しなければなりません。
</p>

<p>

</p>

<p>
REFRESH MATERIALIZED VIEW文でマテリアライズドビューを更新している間、他のセッションでそのマテリアライズドビューを使っているSELECT文はロックされます。
もしもマテリアライズドビューが以下の条件を満たしていて、SELECT文の実行をロックしないようにしたい場合は、REFRESH MATERIALIZED VIEW文にCONCURRENTLYオプションを設定してください。
</p>

<ul>
<li>マテリアライズドビューは列名だけ</li>

すべての行を含むUNIQUEインデックスが少なくとも1つある場合にのみ使えます。 
つまり、そのインデックスは式を使っていたり、WHERE句を含んでいてはいけません。


</ul>

<p>
CONCURRENTLYオプションを使うとREFRESH中でもSELECT文が実行でき、そのSELECT文はREFRESH前のマテリアライズドビューの内容を返します。ただしその場合は、REFRESH MATERIALIZED VIEW文の実行は数倍から数十倍も遅くなります。
</p>




%CHAPTER 実行例

<p>
・ビューの作成
<br>
多数のカラムを持つテーブルのうち、必要な部分のみ表示するビューを定義します。
</p>

<pre>
sampledb=# CREATE VIEW mini_customerlist (id, customer_name)
sampledb-#           AS SELECT id, name FROM customerlist;
CREATE VIEW
</pre>

<p>
・複数のテーブルからビューを定義
<br>
複数のテーブルからビューを定義する例を示します。
</p>

<pre>
sampledb=# CREATE VIEW customer_view (id, name, companyname)
sampledb-#   AS SELECT a.id, a.name, b.company
sampledb-#     FROM customerlist AS a, companylist AS b
sampledb-#       WHERE a.companycode = b.companycode;
CREATE VIEW

sampledb=# SELECT * FROM customer_view WHERE id < 4;
 id |       name       |        companyname         
----+------------------+----------------------------
  1 | デューク東郷     | トーゴー・コーポレーション
  2 | アーネスト東郷   | グラスゴー探鉱
  3 | アランサイジョー | ルモンド
(3 rows)
</pre>


<p>
・ビューの一覧と定義の表示
<br>
ビューの一覧はメタコマンド\dv、ビューの定義はメタコマンド\dで表示できます。
</p>

<pre>
sampledb=# \dv 
              List of relations
 Schema |       Name        | Type |  Owner   
--------+-------------------+------+----------
 public | customer_view     | view | postgres
 public | mini_customerlist | view | postgres
(2 rows)

sampledb=# \d customer_view
    View "public.customer_view"
   Column    |  Type   | Modifiers 
-------------+---------+-----------
 id          | integer | 
 name        | text    | 
 companyname | text    | 
View definition:
 SELECT a.id, a.name, b.company AS companyname
   FROM customerlist a, companylist b
  WHERE a.companycode = b.companycode;
</pre>

<p>
●更新可能ビュー<br>
</p>

<pre>
testdb=# CREATE VIEW itemlist_view (name, price)
       AS SELECT name, price FROM itemlist;
CREATE VIEW
testdb=# SELECT * FROM itemlist_view;
   name   | price 
----------+-------
 pen      |   100
 notebook |   120
 eraser   |    72
 book     |  1000
(4 rows)

testdb=# INSERT INTO itemlist_view VALUES('pencil', 50);
INSERT 0 1
testdb=# SELECT * FROM itemlist_view;
   name   | price 
----------+-------
 pen      |   100
 notebook |   120
 eraser   |    72
 book     |  1000
 pencil   |    50
(5 rows)

testdb=# SELECT * FROM itemlist;
 id |   name   | price | makercode 
----+----------+-------+-----------
  1 | pen      |   100 |        10
  2 | notebook |   120 |        20
  3 | eraser   |    72 |        10
  4 | book     |  1000 |        50
    | pencil   |    50 |          
(5 rows)
</pre>

<p>
●マテリアライズドビュー<br>
マテリアライズドビューの作成、更新、および削除を簡単に示します。
</p>


<pre>
testdb=# SELECT * FROM itemlist;
 id |   name   | price | makercode 
----+----------+-------+-----------
  1 | pen      |   100 |        10
  2 | notebook |   120 |        20
  3 | eraser   |    72 |        10
(3 rows)

testdb=# CREATE MATERIALIZED VIEW mv_itemlist (name, price)
testdb-#        AS SELECT name, price FROM itemlist;
SELECT 3
testdb=# SELECT * FROM mv_itemlist;
   name   | price 
----------+-------
 pen      |   100
 notebook |   120
 eraser   |    72
(3 rows)

testdb=# INSERT INTO itemlist VALUES (4, 'pen', 100, 1);
INSERT 0 1
testdb=# SELECT * FROM itemlist;
 id |   name   | price | makercode 
----+----------+-------+-----------
  1 | pen      |   100 |        10
  2 | notebook |   120 |        20
  3 | eraser   |    72 |        10
  4 | pen      |   100 |         1
(4 rows)

testdb=# SELECT * FROM mv_itemlist;
   name   | price 
----------+-------
 pen      |   100
 notebook |   120
 eraser   |    72
(3 rows)

testdb=# REFRESH MATERIALIZED VIEW mv_itemlist;
REFRESH MATERIALIZED VIEW
testdb=# SELECT * FROM mv_itemlist;
   name   | price 
----------+-------
 pen      |   100
 notebook |   120
 eraser   |    72
 pen      |   100
(4 rows)
</pre>

<pre>
testdb=# CREATE UNIQUE INDEX mv_itemlist_u_idx ON mv_itemlist (name);
CREATE INDEX

testdb=# \d+ mv_itemlist
                Materialized view "public.mv_itemlist"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 name   | text    |           | extended |              | 
 price  | integer |           | plain    |              | 
Indexes:
    "mv_itemlist_u_idx" UNIQUE, btree (name)
View definition:
 SELECT itemlist.name,
    itemlist.price
   FROM itemlist;

testdb=# REFRESH MATERIALIZED VIEW CONCURRENTLY mv_itemlist;
REFRESH MATERIALIZED VIEW
</pre>


CREATE TABLE itemlist (id int, name text, price int, maker int);
INSERT INTO itemlist VALUES (1, 'pen', 100, 10);
INSERT INTO itemlist VALUES (2, 'notebook', 120, 20);
INSERT INTO itemlist VALUES (3, 'eraser', 72, 10);


INSERT INTO itemlist VALUES (4, 'pen', 100, 1);



CREATE MATERIALIZED VIEW mv_itemlist (name, price) 
       AS SELECT name, price FROM itemlist;

