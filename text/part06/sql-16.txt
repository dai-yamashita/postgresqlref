%FILE internal/sql-16.html
%LASTMOD
%KEY pgsql-sql16
%TITLE データの挿入	INSERT

<pre>
[<書式>]

[ WITH [ RECURSIVE ] with_query [, ...] ]
INSERT INTO table_name [ AS alias ] [ ( column_name [, ...] ) ]
    { DEFAULT VALUES | VALUES ( { expression | DEFAULT } [, ...] ) [, ...] | query }
    [ ON CONFLICT [ conflict_target ] conflict_action ]
    [ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ]

* conflict_target (バージョン9.5から)

    ( { index_column_name | ( index_expression ) } 
    [ COLLATE collation ] [ opclass ] [, ...] ) 
    [ WHERE index_predicate ] ON CONSTRAINT constraint_name

* conflict_action (バージョン9.5から)

    DO NOTHING
    DO UPDATE SET { column_name = { expression | DEFAULT } |
                    ( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] ) |
                    ( column_name [, ...] ) = ( sub-SELECT )
                  } [, ...]
              [ WHERE condition ]

======================================================
パラメータ	 説明
======================================================
table_name	データを挿入するテーブル名
column_name	データを挿入するカラム名
DEFAULT VALUES	デフォルト値を使う
expression	挿入する値、または式
query		SELECT文([<6-17>]参照)
conflict_target	
conflist_action	
======================================================

==============================================================
句				説明
==============================================================
WITH [ RECURSIVE ] with_query	WITH句。バージョン9.1から
RETURNING　output_expression	INSERT後の結果を表示する
==============================================================
</pre>

%CHAPTER 解説

<p>
INSERT文でテーブルにデータを挿入します。
PostgreSQLのINSERT文はSQL99標準と完全な互換性がありますが、ビューに対してデータは挿入できません。
</p>

<p>
・DEFAULT 句
<br>
カラムの値が未設定の場合、テーブルの該当するカラムにDEFAULT値が設定されていればデフォルト値を、
設定されていなければNULLを挿入します。
</p>

<p>
・SELECT句
<br>
SELECT文の検索結果を直接テーブルに挿入できます。
</p>

<p>
・RETURNIN句
<br>
バージョン8.2からRETURNING句で挿入結果を表示できます。
使い方は実行例を参照してください。
</p>

%CHAPTER 実行例

<p>
・SELECT文を利用したデータの挿入
<br>
テーブルcustomerlistからidが5未満のレコードを、テーブルnew_customerlistに挿入します。
</p>

<pre>
sampledb=# INSERT INTO new_customerlist (id, name, companycode) 
sampledb-#        SELECT id, name, companycode FROM customerlist WHERE id < 5; 
</pre>

<p>
・RETURNING句の使用例
<br>
RETURNING句を使うと、挿入したレコードデータが表示できます。
</p>

<pre>
sampledb=# INSERT INTO test VALUES(1,10), (2,20) RETURNING id;
 id 
----
  1
  2
(2 rows)

INSERT 0 2

sampledb=# INSERT INTO test VALUES(3,30), (4,40),(5,50) RETURNING *;
 id | data 
----+------
  3 |   30
  4 |   40
  5 |   50
(3 rows)

INSERT 0 3
</pre>


<pre>
INSERT INTO  table_b (pk_b, b) 
SELECT pk_a,a FROM table_a 
ON CONFLICT (pk_b) 
DO UPDATE SET b = (SELECT a FROM table_a WHERE table_b.b = a);

testdb=# \d table_a
   Table "public.table_a"
 Column |  Type  | Modifiers 
--------+--------+-----------
 pk_a   | bigint | not null
 a      | bigint | 
Indexes:
    "table_a_pkey" PRIMARY KEY, btree (pk_a)

testdb=# \d table_b
   Table "public.table_b"
 Column |  Type  | Modifiers 
--------+--------+-----------
 pk_b   | bigint | not null
 b      | bigint | 
Indexes:
    "table_b_pkey" PRIMARY KEY, btree (pk_b)




INSERT INTO  table_b (pk_b, b) 
SELECT pk_a,a FROM table_a 
ON CONFLICT (pk_b) 
DO UPDATE SET b = (SELECT a FROM table_a WHERE table_b.pk_b = pk_a);

I confirmed it can be ran well.

testdb=# SELECT * FROM table_a;
 pk_a | a  
------+----
    1 | 10
    2 | 20
(2 rows)

testdb=# SELECT * FROM table_b;
 pk_b |  b   
------+------
    1 | 1000
(1 row)

testdb=# INSERT INTO  table_b (pk_b, b) 
testdb-#   SELECT pk_a,a FROM table_a
testdb-# ON CONFLICT (pk_b)
testdb-# DO UPDATE SET b = (SELECT a FROM table_a WHERE table_b.pk_b = pk_a);
INSERT 0 2
testdb=# SELECT * FROM table_b;
 pk_b | b  
------+----
    1 | 10
    2 | 20
(2 rows)
</pre>

