%FILE internal/param-05.html
%LASTMOD
%KEY pgsql-param05

%TITLE WAL				WRITE AHEAD LOG


<table border=1>
<caption>[<設定項目一覧>]</caption>
<tr bgcolor="#cccccc">
<th><sup>変更<br>可能性</sup></th> <th>設定項目</th>	<th>パラメータ<br>[デフォルト]</th>		<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Settings</th>
</tr><tr>
<td>×	</td>	<td>wal_level	</td>	<td>[<表4-02>]参照[minimal]  </td>	<td> WALログの出力レベルを設定。詳細は本文。バージョン9.0から</td>
</tr><tr>
<td>△</td>	<td>	fsync	</td>	<td>on/off[on]	</td>	<td>WALログ書き込みとCHECKPOINTで、データ書き込みを同期的に行うか、非同期的に行うか</td>
</tr><tr>
<td>◎</td>	<td>	synchronous_commit	</td>	<td>on/off/local/remote_write[on]	</td>	<td>コミットの制御。バージョン8.3から。詳細は[<2-11>]の[<コラム2-11>]参照</td>
</tr><tr>
<td>△</td>	<td>	wal_sync_method</td>	<td>		[fsync]	</td>	<td>	WALログ書き込みの同期方法を指定。[<表.4-03>]参照</td>
</tr><tr>
<td>△</td>	<td>	full_page_writes	</td>	<td>on/off[on]	</td>	<td>WALバッファページ全体をWALに書き込むか否か。バージョン8.1から</td>
</tr><tr>
<td>×	</td>	<td>wal_buffers		</td>	<td>整数[-1]		</td>	<td>WALバッファサイズ。バージョン9.1からのデフォルト'-1'はshared_buffersの1/32を割り当てる。ただし64[Kbyte]から16[Mbyte]の範囲内。明示的にサイズを設定する場合の最低サイズは32[Kbyte]。バージョン8.1まではバッファ数を指定した(バッファサイズは8[Kbyte]。最低限4以上)</td>
</tr><tr>
<td>△</td>	<td>	wal_writer_delay	</td>	<td>時間[200ms]		</td>	<td>WALライタの検査周期。範囲は1から10000ミリ秒。詳細は[<2-09>]参照。バージョン8.3から</td>
</tr><tr>
<td>◎</td>	<td>	commit_delay	</td>	<td>	整数(0-100000)[0]	</td>	<td>遅延コミットの遅延時間。コミットまでの猶予時間を指定。単位は[マイクロ秒]。詳細は[<2-09>]参照</td>
</tr><tr>
<td>◎</td>	<td>	commit_siblings	</td>	<td>	整数(0-1000)[5]		</td>	<td>遅延コミットが有効となるpostgresプロセスの数(自分自身を含む)。詳細は[<2-09>]参照</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Checkpoints</th>

</tr><tr>
<td>△</td>	<td>	checkpoint_segments</td>	<td>	整数[3]	</td>	<td>チェックポイントが起動するWALセグメントの数。1セグメントは16[Mbyte]。デフォルト3、最低限1以上</td>
</tr><tr>
<td>△</td>	<td>	checkpoint_timeout	</td>	<td>整数(30-3500)[５m]	</td>	<td>チェックポイント起動の間隔。単位は[秒][分]など。バージョン8.1までは[秒]のみ。詳細は[<2-05>]参照</td>
</tr><tr>
<td>△</td>	<td>	checkpoint_completion_target</td>	<td>	0.0-1.0[0.5]</td>	<td>   負荷分散CHECKPOINTにおいて、CHECKPOINT周期(checkpoint_timeout)に対するCHECKPOINT実行時間の割合を設定する。詳細は[<2-05>]参照。バージョン8.3から</td>
</tr><tr>
<td>△</td>	<td>	checkpoint_warning	</td>	<td>整数[30s]	</td>	<td>	WALセグメントの溢れによるチェックポイント実行が、設定した秒数以内に発生した場合にメッセージを書き込む。単位は[秒]。0ならばメッセージを出さない。</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Archiving</th>

</tr><tr>
<td>△</td>	<td>archive_mode　</td>	<td>	 on/off[off]  </td>	<td>  アーカイブロギングを行うか否か、明示的に指定する。バージョン8.3から</td>
</tr><tr>
<td>×	</td>	<td>archive_command</td>	<td>	文字列[''(空文字)]	</td>	<td>WALログをアーカイブログ保存用ディレクトリにコピーするコマンド。詳細は[<3-21>]参照</td>
</tr><tr>
<td>△</td>	<td>archive_timeout</td>	<td>時間[0]</td>	<td>強制的にアーカイブログを生成する時間。設定した時間が過ぎると、WALログファイルを使いきったかどうかに関わらずアーカイブログ領域にコピーする。デフォルトは"0"で、強制的な切り替えはしない。バージョン8.2から</td>

</tr></table>
<br>


%CHAPTER 解説

<p>
WALについては[<2-09>]を参照してください。
</p>


<p>
・wal_level
<br>
バージョン9.0からwal_levelをサポートしました。設定できる値は次の３種類です([<表4-02>])。
</p>

<table border=1>
<caption>[<表4-02>]wal_levelの設定値</caption>
<tr bgcolor="#cccccc">
<th>値</th>	<th>説明</th>
</tr><tr>
<td>minimal</td>	<td>最低限の出力でWAL書き込みに関わる処理を極力低減する。例えばCOPY FROM文で読み込んだデータのWALログを書き込まない、<br>アーカイブログの切り替え処理をすべてスキップするなど。よって、アーカイブロギングやレプリケーションはできない。</td>
</tr><tr>
<td>archive</td>	<td>アーカイブロギングとレプリケーションが可能なレベルのWALログを出力する。スレーブ側のHotStandbyのためのWALログは出力しない。</td>
</tr><tr>
<td>hot_standby</td>	<td>可能な全てのレベルのWALログを出力する。スレーブ側でHotStandbyするにはこの値を設定しなければならない。</td>
</tr></table>

<br>


<p>
・wal_sync_method
<br>
WALログの同期書き込み方法を設定します。設定できるパラメータは[<表4-03>]参照してください。
</p>

<table border=1>
<caption>[<表4-03>] 同期書き込み方法</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>fsync</td>		<td>コミットごとにfsync()を呼び出す</td>
</tr><tr>
<td>fdatasync</td>		<td>コミットごとにfdatasync()を呼び出す</td>
</tr><tr>
<td>open_sync</td>		<td>O_SYNCフラグを設定してopen()を呼び出し、WALファイルを書き出す</td>
</tr><tr>
<td>open_datasync</td>		<td>O_DSYNCフラグを設定してopen()を呼び出し、WALファイルを書き出す</td>
</tr><tr>
<td>fsync_writethrough</td>		<td>WINDOWS用。コミットごとにfsync()を呼び出す</td>
</tr></table>

<br>

<p>
バージョン9.1からcontribに同期書き込みの方式別ベンチマークツールpg_test_fsyncがサポートされました。
これを使って適切な同期書き込み方法を選択してください。
</p>

<p>
なお、誤解しやすいので念のため付記しますが、CHECKPOINTの同期書き込みはwal_sync_methodに依存せず、常にfsync()です。
</p>


<p>
・fsync
<br>
fsyncを無効(off)にすると、WAL書き込みだけでなくCHECKPOINTも非同期書き込みになります。
</p>


<p>
・archive_timeout
<br>
通常、アーカイブログはWALログを使い切るか、関数pg_switch_xlog()を実行したときに作られます。
</p>

<p>
WALログサイズはデフォルトで16[Mbyte]なので、使い切るにはかなりのトランザクションを実行しなければなりません。
もしもサーバがハードウエアクラッシュして、pg_xlog以下のWALログが読み取り不可能になると、
たとえアーカイブログが残っていても、WALログに記録された多くの更新情報は失われてしまいます。
</p>

<p>
このような事態を避けるため、archive_timeoutに設定した時間毎に強制的にWALログを切り替えてアーカイブログ領域にコピーできます。
これによって、たとえpg_xlog下のWALログが破壊されても、最悪archive_timeout時間の更新が失われるだけで済みます。
</p>

<p>
ただし、データロストを完全には避けることができない上に、16[Mbyte]のアーカイブログがarchive_timeout毎に生成されるので、運用には注意が必要です。
他の方法の検討を強く奨めます([<3-20>]参照)。
</p>
