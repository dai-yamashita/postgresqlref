%FILE internal/admin-24.html
%LASTMOD
%KEY pgsql-admin24


%TITLE SQL/MED FDW


%CHAPTER SQL/MED FDW とは

<p>
SQL/MED(Management of External Data)は、外部のRDBMSやサーバ上のデータをSQLで操作するための規格([<脚注3>])です。
<br>
SQL/MEDは大規模な規格ですが、PostgreSQLはバージョン9.1で規格の一部である「外部テーブル(Foreign Table)」をサポートしました。
</p>


<blockquote><table BORDER="1"><tr><td>脚注3</td><td>
<p>
ISO/IEC 9075-9:2003 Information technology -- Database languages -- SQL -- Part 9: Management of External Data (SQL/MED)
</p>
<pre>
http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=34136
</pre>
</td></tr></table></blockquote>


<p>
contribディレクトリにあるpostgres_fdwモジュールを使えば、他のPostgreSQLサーバ上にあるテーブルを検索したりデータ更新ができます。
また、外部サイトで公開されている拡張モジュールを組み込めば、外部サーバのデータを検索したり、モジュールによってはデータの更新もできます。
</p>


<table BORDER="1">
<caption>[<図3-XX>] FDW</caption>
<tr><td><center>
<img src="./fig-3-24-01.png"><br>
</center></td></tr>
</table>


<p>
PGXNのfdwにはOracleを外部テーブルとして検索するoracle_fdwモジュールや、MySQLを検索するmysql_fdw、変わったところではtwitterを読み出すtwitter_fdwなどが公開されています。ただし、これらの使用はすべて自己責任となります。メンテナンスが行われていないものも多数あります。また、ほとんどは検索のみでデータ更新できるモジュールはごく少数です。
</p>

<p>
SQL/MEDは非常に興味深い規格ですが、安易にサーバ間でデータ連携していると、
一台の外部サーバがダウンしたためにシステム全体に支障をきたすとか、メンテナンスで停止しようにも外部サーバにデータを公開しているため停止できないなど、システム運用が面倒になります。
<br>
サーバ間のデータ連携は、検討と吟味を十分行った上で導入してください。
</p>


%CHAPTER FDWの仕組み


<table BORDER="1">
<caption>[<図3-XX>] FDW</caption>
<tr><td><center>
<img src="./fig-3-24-02.png"><br>
</center></td></tr>
</table>



<table BORDER="1">
<caption>[<図3-XX>] FDW</caption>
<tr><td><center>
<img src="./fig-3-24-03.png"><br>
</center></td></tr>
</table>




%CHAPTER FDWの設定手順

<p>
FDWの設定手順を以下に示します。
</p>

<pre>
1. extensionのインストール
2. 外部サーバの定義
3. 外部サーバユーザマッピングの設定
4. 外部テーブルの定義
</pre>

%SECTION extensionのインストール

<p>
PostgreSQL用のextension postgres_fdwはcontribディレクトリにあります。
それ以外は外部サイトからダウンロードしなければなりません。
</p>

<p>
postgres_fdwを含むほとんどのextensionはCREATE EXTENSION文を実行するだけで簡単にインストールできます([<脚注4>])。
</p>

<blockquote><table BORDER="1"><tr><td>脚注4</td><td>

<p>
CREATE EXTENSION文がサポートされる以前は、CREATE FOREIGN DATA WRAPPER文を直接実行してFDWモジュールを登録しなければなりませんでした。しかし現在はほぼすべてのFDWはCREATE EXTENSION文で導入でき、CREATE FOREIGN DATA WRAPPER文を打ち込む必要はなくなりました。
</p>

<p>
CREATE EXTENSION文の実行時、それぞれに付属するSQLスクリプトが実行されます。
そのSQLスクリプトには必ずCREATE FOREIGN DATA WRAPPER文が記述されていて、
それがFDWモジュールの登録を行います。
</p>

</td></tr></table></blockquote>


%SECTION 外部サーバの定義

<p>
CREATE SERVER文で外部サーバを定義します。ここで指定するのは、外部サーバの稼働するホスト名やアクセスするためのポート番号などです。
</p>


%SECTION 外部サーバユーザマッピングの定義

<p>
次に、CREATE USER MAPPING文で外部サーバのユーザマッピングを定義します。ここで指定するのは、アクセスするためのユーザ名やパスワードなどで、extension毎に異なります。
</p>

%SECTION 外部テーブルの定義

<p>
最後に、CREATE FOREIGN TABLE文で外部サーバ上に定義されたテーブルと同じテーブル定義を行います。
PostgreSQLからは、この定義によって指定されたテーブル名でSQLが実行できるようになります。
</p>


%CHAPTER 実行例：mysql_fdwを試す

<p>
PostgreSQLとMySQLは同じサーバで稼働しているとします。
</p>

<p>
PGXN(http://pgxn.org/dist/mysql_fdw/)からmysql_fdwをダウンロードし、バージョン9.1以降のPostgreSQLソースコードディレクトリのcontribで展開します。
</p>

<pre>
postgres> cd postgresql-9.5.3/contrib
postgres> unzip  mysql_fdw-2.1.2.zip
</pre>

<p>
展開したディレクトリで、makeとmake installを実行します。
ここでPostgreSQLは/usr/local/pgsql以下に、MySQLは/usr/local/mysql以下にインストールされていると仮定します。
</p>

<pre>
postgres> cd mysql_fdw-2.1.2
postgres> export PATH=/usr/local/pgsql/bin/:/usr/local/mysql/bin:$PATH
postgres> make USE_PGXS=1 && make USE_PGXS=1 install
</pre>

<p>
次にmysql_fdwを組込み、CREATE SERVER文で外部サーバ、CREATE FOREIGN TABLE文で外部テーブル、
CREATE USER MAPPING文で外部サーバへのアクセスをそれぞれ定義します。
</p>

<pre>
sampledb=# CREATE EXTENSION mysql_fdw;
CREATE EXTENSION
sampledb=# \dx
testdb=# \dx
                                List of installed extensions
    Name     | Version |   Schema   |                      Description                      
-------------+---------+------------+--------------------------------------------------
 mysql_fdw   | 1.0     | public     | Foreign data wrapper for querying a MySQL server
 plpgsql     | 1.0     | pg_catalog | PL/pgSQL procedural language
(3 rows)
(2 rows)

sampledb=# CREATE SERVER mysql_svr FOREIGN DATA WRAPPER mysql_fdw 
sampledb-#    OPTIONS (host '127.0.0.1', port '3306');
CREATE SERVER

sampledb=# CREATE FOREIGN TABLE itemlist (id int, name text, price int) SERVER mysql_svr
sampledb-# OPTIONS (dbname 'sampledb', table_name itemlist');
CREATE FOREIGN TABLE

sampledb=# CREATE USER MAPPING FOR PUBLIC SERVER mysql_svr 
sampledb-#                              OPTIONS (username 'mysql', password '');
CREATE USER MAPPING
</pre>

<p>
以降、MySQLで定義されたテーブルを、PostgreSQLの通常のSELECT文で検索できます。
</p>

<pre>
sampledb=# -- MySQLサーバ上にあるテーブルを検索する。
sampledb=# SELECT * FROM itemlist WHERE id = 2;
 id |  name  | price 
----+--------+-------
  2 | eraser |    80
(1 row)
</pre>

