%FILE internal/admin-06.html
%LASTMOD
%KEY pgsql-admin06

%TITLE PostgreSQLサーバの起動/停止

<pre>
[<書式>]
● 起動
pg_ctl start   [-w] [-t SECS] [-D dbdir] [-s] [-l file_name] 
					      [-o "OPTIONS"] [-p path]

● 停止
pg_ctl stop    [-W] [-t SECS] [-D dbdir] [-s] [-m SHUTDOWN-MODE]

● 再起動
pg_ctl restart [-w] [-t SECS] [-D dbdir] [-s] [-m SHUTDOWN-MODE] 
					      [-o "OPTIONS"]

● 設定ファイルの再読み込み
pg_ctl reload  [-D dbdir] [-s]

● 状態の表示
pg_ctl status  [-D dbdir]

● リカバリモード終了
pg_ctl promote [-D dbdir] [-s]
				(バージョン9.1から)

==================================================================
主なオプション		説明
==================================================================
-w			起動処理が終了するのを待つ。60秒でタイムアウト。デフォルトで有効
-t SEC			-wもしくは-Wオプイションでタイムアウトする時間SECを設定。バージョン8.3から
-D dbdir		データベースクラスタのあるベースディレクトリ(dbdir)を設定。環境変数PGDATAに設定すれば省略可能
-s			エラーメッセージのみを表示
-l file_name		file_nameにサーバログを出力
-o OPTIONS		postmasterへ直接オプション(options)を渡す
-m SHUTDOWN-MODE	停止モードmodeを指定。本文参照
-p path			起動するpostmasterがあるディレクトリ(path)を指定。バージョンやコンパイルオプションが異なるpostmasterが存在する場合に使える。通常は不要
-W			終了を待たない
==================================================================
</pre>

%CHAPTER 解説

<p>
pg_ctlコマンドでPostgreSQLの起動や停止など行います。
バージョン9.0からはinitdbの機能も取り込んでいますが、ここでは説明を割愛します。
<br>
なお、pg_ctlがシグナルを送るデーモンプロセスは、過去にpostmasterプロセスと呼ばれていました。ここでは旧来の呼び名を復活させますが、実体は[<2-01>]の[<図2-01>]におけるpostgres(RDBMSデーモン)です。
</p>

<p>
・reload
<br>
postmasterにSIGHUPシグナルを送り、postgresql.confやpg_hba.confなどの設定ファイルを再読み込みします。
クライアントとの接続を切ることなく、設定ファイルの変更を反映できます。
ただし、すべてのパラメータが変更できるわけではないので注意してください。
</p>

<p>
・promote
<br>
レプリケーションモードで稼働しているスレーブに対してpromoteで実行すると、リカバリモードを終了して通常の書き込み可能なモードに移行します。
詳細は[<2-11>]、[<3-23>]を参照してください。
</p>

<p>
・-lオプション
<br>
サーバログファイルにはプロセスがどのような状態で起動したかなど、サーバプロセスの動作情報が書き込まれます。
<br>
サーバログファイルを置くディレクトリは、pg_ctlを実行したOSユーザ(postgres)が書き込み可能でなければなりません。
</p>

<p>
・-mオプションと停止モード
<br>
停止モードを設定します。停止モードの概略を以下に示します。
</p>

<ol>
<li>smartモード</li>
 <p>
全クライアントの接続が切れた後にサーバ停止。60秒待って接続が残っている場合は停止を諦める。
UNIX系OSでのデフォルト。
<br>
具体的な動作を示す。
pg_ctlがpostmasterにSIGTERMシグナルを送る。
SIGTERMシグナルを受け取ったpostmasterは新しい接続を禁止し、全postgresプロセスが時間内に終了するのを待つ。
すべてのpostgresプロセスが終了すればpostmaster自身も終了する。
 </p>

<li>fastモード</li>
 <p>
全クライアントとの接続を切断して即座にサーバは各種終了処理を行ってから停止。
実行中のトランザクションはアボートする。
<br>
具体的な動作を示す。
pg_ctlがpostmasterにSIGINTシグナルを送る。
SIGINTシグナルを受け取ったpostmasterは新しい接続を禁止し、
すべてのpostgresプロセスにSIGTERMを送る。
各postgresプロセスは現在のトランザクションをアボートして即座に終了し、
postmasterは全postgresプロセス終了後に終了する。
 </p>

<li>immediateモード</li>
 <p>
各種終了処理を行わず即座にサーバを停止。
<br>
具体的な動作を示す。
pg_ctlがpostmasterにSIGQUITシグナルを送る。
SIGQUITシグナルを受け取ったpostmasterはすべてのpostgresプロセスにSIGQUITを送る。
そしてpostmaster、postgresプロセス共々、即刻終了する。
CHECKPOINTすら行わずに強制終了するので緊急時にのみ使う。
 </p>
</ol>


%CHAPTER 実行例

<p>
・起動
<br>
OSユーザpostgresがPostgreSQLを起動します。
</p>
<pre>
postgres> pg_ctl start -D /usr/local/pgsql/data
</pre>

<p>
・smartモードによる停止
</p>
<pre>
postgres> pg_ctl stop -D /usr/local/pgsql/data 
</pre>

<p>
・fastモードによる停止
</p>
<pre>
postgres> pg_ctl stop -D /usr/local/pgsql/data -m fast 
</pre>

