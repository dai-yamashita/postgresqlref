%FILE internal/admin-20.html
%LASTMOD
%KEY pgsql-admin20

%TITLE 耐障害性、高可用性

<p>
DBMSに対する最も基本的な要求は「データ保全」です。
可用性の議論は、データロストしないシステムが前提となります。
本書では「データロスト」を「トランザクションがCOMMITし、書き込み完了したデータを喪失すること」と定義します([<脚注8>])。
</p>

<blockquote><table BORDER="1"><tr><td>脚注8</td><td>
<p>
故障によってトランザクションが完了せず、COMMITのレスポンスが返らない場合はデータロストとみなしません。
同期レプリケーションにおけるこの場合の対処方法は、[<3-23>]で詳しく解説します。
</p>
</td></tr></table></blockquote>


<p>
一般に
「障害(failure)」とはサービスに影響をあたえる異常のことであり、
その障害はシステム構成要素の「故障(fault)」に起因します。
様々なレベルで様々な種類のシステム障害がありますが、
ここでは「データロスト」に絞って議論します。
</p>



<p>
[<2-09>]で解説したWALは、プロセス故障に対してデータベースの一貫性(consistency)と永続性(durability)を確保する仕組みです。
しかし、WALログを書き込むHDDが故障するとリカバリができなくなり、データロストします。
<br>
よってWALだけに頼らず、データを多重化して耐障害性を高める方法が必要になってきます。
また、機材を多重化することで、可用性を向上させることも可能です。
</p>


<p>
オープンソースムーブメントの隆盛とともに、
耐障害性と高可用性を高める様々なプロダクトが開発されています。
それぞれのプロダクトは排他的でなく、
むしろいくつかのプロダクトを組み合わせてシステム構築する場合がほとんどです。
</p>

<p>
以下、PostgreSQLの耐障害性と高可用性を確保するシステム構築パターンと、
それぞれの構成要素について解説します。
</p>


<p>
なお、公式ドキュメントの「高可用性、負荷分散およびレプリケーション」には、
本書と違う切口で耐障害性と高可用性を確保する方式が列挙されています。
</p>



%CHAPTER システム構築パターン

<p>
オープンソースプロダクトを使った耐障害性と高可用性を確保するためのシステム構築パターンを示します([<表3-22>]参照)。
<br>
現時点(2012年)で各プロダクトの完成度を考慮すれば、
[<表3-22>]に列挙した構築パターンは現実的、且つ合理的と思われます。
</p>


<table border=1>
<caption>[<表3-22>]システム構築パターン</caption>
<tr bgcolor="#cccccc">
<th>構成　　　　　　　</th>	<th>耐障害性</th>	<th>可用性</th>	<th>説明</th><th>参照　　　 　  </th>
</tr><tr>
<td>アーカイブログ</td>	<td>△</td><td>-</td>
<td>他の機能と組み合わせて耐障害性を確保する。</td>	<td>[<3-21>]</td>

</tr><tr>
<td>同期レプリケーション</td><td>○</td><td>-</td>
<td>マスタスレーブ同時故障以外、データロストしない。
ただし、マスタ故障時に開いていたトランザクションの結果は不定になるので、
スレーブ側の状態はユーザやアプリケーションが確認しなければならない。
詳細は[<3-23>]</td>	<td>[<3-22>]<br>[<3-23>]</td>

</tr><tr>
<td>アーカイブログ<br> + DRBD</td><td>○</td><td>-</td>
<td>ウォームスタンバイ構成。DRBDは同期モード(プロトコルC)。マスタスレーブ同時故障以外、データロストしない。</td>	<td>[<3-21>]<br>[<コラム3-4>]</td>

</tr><tr>
<td>アーカイブログ<br> + DRBD<br> + Pacemaker</td><td>○</td><td>△</td>
<td>ウォームスタンバイ構成。DRBDは同期モード(プロトコルC)。マスタスレーブ同時故障以外、データロストしない。Pacemakerでフェールオーバ対応すれば可用性も確保できる。</td>	<td></td>


</tr><tr>
<td>同期レプリケーション<br> + Pacemaker</td><td>○</td><td>○</td>
<td>同期レプリケーションで耐障害性、Pacemakerで高可用性を確保する。</td>	<td>[ A-02]</td>

</tr><tr>
<td>同期レプリケーション<br> + pgpool-II</td><td>○</td><td>○</td>
<td>同期レプリケーションで耐障害性、pgpool-IIで可用性を確保する。ただし、pgpool-IIが単一障害点。(2012年8月のver3.2でWatchdog機能が追加された。)</td>	<td>[ A-01]</td>

</tr><tr>
<td>同期レプリケーション<br> + pgpool-II<br> + Pacemaker</td><td>○</td><td>○</td>
<td>同期レプリケーションで耐障害性、pgpool-IIとPacemakerで高可用性を確保する。ただし、pgpool-IIのPacemaker対応は開発途上。</td> <td></td>

</tr></table>

<br>

<p>
システムを構成する各サーバは、
HDDのキャッシュ機能を無効にするなど、
同期書き込みしたデータが確実にHDDのプラッタに記録されるような設定を行ってください。
HDDに対するWALログの同期書き込みが保証されなければ、システムの耐障害性そのものも保証されません。

また、

RAIDなどハードウエアレベルで最低限の耐障害性を確保しているものとします。
RAIDについては[<コラム3-3>]を参照してください。
</p>


<p>
以下、システムの構成要素について簡単に解説します。
</p>


<blockquote><table BORDER="1"><tr><td>コラム3-3:ハードウエアによる耐障害性と高可用性の確保</td><td>


<p>
ハードウエアレベルで耐障害性を確保するには、例えばRAID構成のストレージを使う一般的なものから、
ハードウエア的に完全多重化したフォールトトレラントサーバ(Fault tolerant Server)を使う特殊なものまで、
耐障害性の要求仕様、およびコストに応じて多くの選択肢があります。
</p>

<ul>
<li>RAID</li>
<p>
RAIDにはいくつかのタイプがあり、それぞれ耐障害性に特徴があります。
例えばRAID1は完全2重化(ミラーリング)で、内部HDDの2台同時故障が発生しない限り、データロストを避けることができます。
</p>

<p>
ただし、RAIDコントローラとHDDをサーバに取り付けるだけでデータが守られるわけではありません。
<br>
RAIDコントローラもHDDも高速レスポンスのためにキャッシュを持っているので、
故障が発生してもデータが確実にHDDのプラッタに書き込める機種や設定が必要です。
例えば、
バッテリ内蔵のRAIDコントローラ使用、
HDDをwrite-through(ディスクコントローラでキャッシュせずに即座に書き込む)モードで運用する、などです。
<br>
製品毎に基本機能や初期設定が異なるので、
使用に際して「故障が発生しても確実にデータを書き込むデバイス選択と設定」が必須です。
</p>


<li>フォールトトレラントサーバ</li>
<p>
フォールトトレラントサーバの場合、
高い耐障害性と高可用性を同時に確保できますが、
サーバのコストが一般のサーバの数倍から10倍程度に跳ね上がります。
</p>

</ul>

</td></tr></table></blockquote>


%SECTION PostgreSQLの耐障害機能

<p>
PostgreSQLはバージョン7.1(2001年)でサポートしたWAL、
バージョン8.0(2005年)でサポートしたアーカイブログと、
少しずつ永続性(durability)を確保する機能を取り込んできました。
<br>
そしてバージョン9.0(2010年)の非同期レプリケーションを経て、
バージョン9.1(2011年)の同期レプリケーションによって、完全なデータの多重化機能を手に入れました。
</p>


<ul>
<li>アーカイブログ</li>

<p>
アーカイブログ機能単体では、
データロストの被害をなるべく小さくすることしかできませんが、
DRBDと組み合わせれば、データロスト無しのシステムが構築できます。
さらに、Pacemakerと組み合わせて可用性を高めることも可能です。
</p>
<p>
アーカイブログ機能は同期レプリケーションや外部プロダクトの運用管理に必須の機能です。
<br>
[<3-21>]でアーカイブログとPITRによるリカバリ方法を解説します。
</p>


<li>同期レプリケーション</li>

<p>
同期レプリケーションは、
WALデータをマスタとスレーブの２箇所のHDDに同期的に書き込みすることで、データロストを防ぎます。
よって耐障害性に関しては非常に高い機能を有します。
<br>
ただし、可用性に関してはユーザが責任を持たねばなりません。
例えばフェールオーバなどの故障対応は、手動で行うかPacemakerなど外部システムを利用することになります。
</p>

<p>
[<3-22>]で同期レプリケーションの設定方法、[<3-23>]で故障対応を詳説します。
</p>

</ul>


%SECTION DRBD

<p>
DRBD (Distributed Replicated Block Device) はLinuxの分散ストレージシステムです。
<br>
いくつかの運用モードがあり、マスタとセカンダリの同期書き込みモード(プロトコルC)もサポートしています。
よって、
アーカイブログとWALログをセカンダリに同期書き込みする、
ウォームスタンバイ構成が可能です。
</p>

<p>
DRBDのサイトを以下に示します。
</p>

<pre>
http://www.drbd.org/
</pre>


%SECTION 外部プロダクトのレプリケーションソフト

<p>
PostgreSQLは長らく標準のレプリケーション機能をサポートしなかったため、
外部プロダクトとして多数のレプリケーションソフトが開発されました。
<br>
2012年時点で、開発が続いているものを以下に示します([<表3-23>])。
</p>


<table border=1>
<caption>[<表3-23>] PostgreSQL用レプリケーションソフト</caption>
<tr bgcolor="#cccccc">
<th>プロダクト</th>	<th>URL</th>		<th>形式</th>	<th>同期/非同期</th>	<th>レプリケーション単位</th>
</tr><tr>
<td>pgpool-II</td>	<td>http://pgfoundry.org/projects/pgpool/</td>	<td>ミドルウエア</td> <td>同期</td>	<td>DB</td>
</tr><tr>
<td>Slony-I</td>	<td>http://www.slony.info/</td>		<td>マスタスレーブ</td>	<td>非同期</td>	<td>テーブル</td>
</tr><tr>
<td>bucardo</td>	<td>http://bucardo.org/</td>	<td>マルチマスタ/マスタスレーブ</td>	<td>非同期</td>	<td>テーブル</td>

</tr></table><br>


<p>
この中で、機構上データロストしないのは同期レプリケーションのpgpool-IIだけです。
しかし、ミドルウエア方式という構造上、pgpool-II自体が単一障害点(Single Point of Failure)であり、
高可用性に関しては問題が残ります。
</p>

<p>
pgpool-IIは[< A-01>]で概説します。
</p>


%SECTION Pacemaker

<p>
オープンソースのHAクラスタリングソフトPacemakerで、
高可用性を確保するシステム構築が可能です。
</p>

<p>
[< A-02>]にPacemakerの概要と情報源を示します。
</p>

