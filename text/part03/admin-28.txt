%FILE internal/admin-28.html
%LASTMOD
%KEY pgsql-admin28

%TITLE Monitoring tools

<p>
Previous sectionで、manualによるPostgreSQLのactivityのmonitoringを説明しました。
しかし、RDBMSを安全に運用し続けるには、ある瞬間のactivityをcheckするだけでなく、
ある期間(数日間,数週間、数ヶ月間、数年間)のactivityの変化をmonitoringし続ける必要もあります。
<br>
もしも、定期的なmonitoringを怠ると、
貴方が見ていないときに起きている異常、例えば夜中にアクセスが急増していること、を見逃してしまいます。
また、データの増加によってスロークエリの数やレスポンス時間も増加している場合でも、
長期的なトレンドを把握しなければ、そのような現象を認識することはできないでしょう。
</p>

<p>
幸い、いくつかのPostgreSQL専用のmonitoring softwareが存在していますし、
many open source general-purpose monitoring softwaresはPostgreSQLをサポートしています。
</p>

<p>
In this section, monitoring softwareを２つに分けて、
Monitoring software for exclusive use of PostgreSQL and general-purpose monitoring and alerting software、
いくつかの有用なsoftwareを説明します。
</p>

%CHAPTER Monitoring software for exclusive use of PostgreSQL

<p>
PostgreSQLコミュニティは多くの補助ツール(support tool)を提供してます。
monitoring softwareの分野でも、複数の有用なツールが作られてきました。
それらの中から、現在もメンテナンスされている３つのsoftware:
pg_activity,
pgstatspack,
pg_statsinfoを説明します。
</p>


<p>
なお、ここでは省略しましたが、pg_stata_statementというcontributed moduleがあります。
This module provides a means for tracking execution statistics of all SQL statements executed by a server.
</p>


%SECTION pg_activity

<p>
pythonで実装されたツールpg_activityは、PostgreSQLのactivityをリアルタイムでターミナルに表示する、topコマンドのようなtoolです。
</p>

<ul>
<li><a href="https://github.com/julmon/pg_activity/">https://github.com/julmon/pg_activity/</a></li>
</ul>


<font color="#0000ff">
%SUBSECTION INSTALLATION

<p>
pg_activityを実行するにはpythonの言語環境と、
pythonの
psycopg2とpsutilが必要です。予め、これらをインストールしておいてください。
</p>

<p>
pg_activityのURLから、アーカイブpg_activity-master.zip をダウンロードし、
以下の手順でインストールします。
</p>
</font>

<pre><font color="#0000ff">
postgres> unzip pg_activity-master.zip 
postgres> cd pg_activity-master
postgres> export PATH=$PATH:/usr/local/pgsql/bin/
postgres> sudo python ./setup.py  install
</font></pre>


<font color="#0000ff">

%SUBSECTION How to use

</font>

<p>
以下のように、ターミナルからpg_activityを起動すると、Fig X-XXのように接続したDatabaseのactivityをリアルタイムで表示できます。
デフォルトでは2秒毎に画面が更新されます。
</p>

<pre>
postgres> pg_activity -h localhost -U postgres -d sampledb
</pre>



<table border=1>
<caption>[< fig 4-XX>] pg_activity<br></caption>
<tr><td>
<left>
<img src="./pg_activity.jpg" width="640" height="400"><br>
</left>
</td></tr></table>


<p>
pg_activityはいくつかのモードがあり、
Waiting queriesやBlocking queriesだけを表示することもできます。
</p>

<table border=1>
<caption>[< fig 4-XX>] pg_activity (display: Blocking queries)<br></caption>
<tr><td>
<left>
<img src="./pg_activity2.jpg" width="640" height="400"><br>
</left>
</td></tr></table>


<p>
簡単にDatabaseのactivityを表示できるので、
管理PCにインストールしておくと便利です。
</p>

<p>
なお、ほとんど同じようなtoolにpg_viewがあります。機能もほとんど同じなので、ユーザの好みで選択すると良いでしょう。
</p>

<ul>
<li><a href="https://github.com/zalando/pg_view">https://github.com/zalando/pg_view</a></li>
</ul>



%SECTION pgstatspack

<p>
pgstatspackは、統計情報の収集と分析を行ういくつのシェルスクリプトからなるツール群です。
</p>


<ul>
<li><a href="http://pgfoundry.org/projects/pgstatspack">http://pgfoundry.org/projects/pgstatspack</a></li>
</ul>


<p>
pgstatspackの仕組みは非常に簡単で、PostgreSQL内部に統計情報を保存するテーブルを作り、
シェルスクリプトを実行して統計情報を保存していきます。定期的に情報を集計するにはcronを使います。
<br>
pgstatspackが表示するデータ項目を以下に示します。
</p>


<ul>
<li>Database size</li>
<li>Database statistics</li>
<li>Top 20 tables ordered by table size changes</li>			
<li>Top 20 tables ordered by high table to index read ratio</li>
<li>Top 20 tables ordered by inserts</li>
<li>Top 20 tables ordered by updates</li>
<li>Top 20 tables ordered by deletes</li>
<li>Tables ordered by percentage of tuples scanned</li>
<li>Indexes ordered by scans</li>
<li>Sequences ordered by blks_read</li>
<li>Top 20 SQL statements ordered by total_time</li>
<li>Top 20 user functions ordered by total_time</li>
<li>background writer stats</li>
<li>background writer relative stats</li>
</ul>

<p>
pg_statspackはとても優秀なtoolで、
汎用のmonitoring applicationsと同等のactivityをmonitorできます。
また、pg_statspackはシンプルなメカニズムなので、比較的簡単に機能拡張が可能です。
<br>
なんらかの都合で(後で説明する)general-purpose monitoring and alerting softwareを導入できない場合、
pg_statspackはとても役に立つ武器になるでしょう。
</p>

<font color="#0000ff">

%SUBSECTION INSTALLATION

<p>
インストールはとても簡単です。
以下のサイトからパッケージをダウンロードして、
適当なインストールディレクトリで展開し、インストールスクリプトinstall_pgstats.shを実行するだけです。
</p>

</font>

<pre><font color="#0000ff">
postgres> cd /usr/local/bin
postgres> wget http://pgfoundry.org/frs/download.php/3151/pgstatspack_version_2.3.1.tar.gz
postgres> tar xvfz pgstatspack_version_2.3.1.tar.gz
postgres> cd pgstatspack
postgres> PATH=/usr/local/pgsql/bin:$PATH ./install_pgstats.sh
</font></pre>


%SUBSECTION  統計情報の取得

<p>
関数pgstatspack_snap()を実行する度に、統計情報のsnapshotをテーブルに保存していきます。
</p>

<pre>
postgres> psql -q template1
template1=# SELECT pgstatspack_snap('');
</pre>


<p>
cronで定期的に統計情報を収集するためのスクリプト(snapshot.sh)も用意されています。
pgstatspackの開発者は15分毎の実行を推奨しています。
</p>

<p>
また、保存した統計情報を削除するスクリプトdelete_snapshot.shもあるので、必ず定期的に実行してください。
</p>

<p>
crontabの記述例を示します。snapshot.shは15分毎、delete_snapshot.shは毎日午前1時30分に実行します。
</p>

[< crontabの記述例>]
<pre>
*/15 * * * * PATH=/usr/local/pgsql/bin:$PATH /dir/snapshot.sh 1>/dev/null 2>&1
30   1 * * * PATH=/usr/local/pgsql/bin:$PATH /dir/delete_snapshot.sh 1>/dev/null 2>&1
</pre>

%SUBSECTION レポート

<p>
取得した統計情報を集計してレポートを作成するスクリプトpgstatspack_report.shもあります。
</p>

<p>
オプション-uにデータベースユーザ名、-dに統計情報を収集するデータベース名、-fにレポートを書き込むファイル名を指定して実行します。
<br>
すると、保存している統計情報の一覧を表示し、
どこから(start snapshot id)どこまで(stop snapshot id)集計するか、尋ねてきます。
<br>
必要な範囲の統計情報のid番号を入力すると、指定したファイルにレポートを書き込みます。
</p>

<pre>
postgres> ./pgstatspack_report.sh -u postgres -d sampledb -f report.txt
 snapid |             ts             |     description     
--------+----------------------------+---------------------
      7 | 2012-04-14 20:30:01.591125 | cron based snapshot

.,. 略 ...

      2 | 2012-04-14 19:15:01.593137 | cron based snapshot
      1 | 2012-04-14 19:00:01.896974 | cron based snapshot
(7 rows)

Enter start snapshot id : 1
Enter stop snapshot id  : 7
</pre>


<p>
実際に出力したレポートの一部を以下に示します。
</p>

<pre>
###########################################################
PGStatspack version 2.3 by uwe.bartels@gmail.com
###########################################################

... snip ...

 current_database | dbsize 
------------------+--------
 sampledb         | 23 MB
(1 row)


Database statistics
 database  | tps  | hitrate | lio_ps | pio_ps | rollbk_ps 
-----------+------+---------+--------+--------+-----------
 sampledb  | 0.23 |   99.00 |  11.41 |   0.02 |      0.00
 postgres  | 0.04 |   99.00 |   2.63 |   0.00 |      0.00
 template1 | 0.03 |   99.00 |   0.92 |   0.00 |      0.00
 template0 | 0.00 |    0.00 |   0.00 |   0.00 |      0.00
(4 rows)

... snip ...
</pre>


<p>
確かに、可読性はよくありませんが(readability is not good)、
しかし簡易的なtool(simplified tool)としては充分でしょう。
</p>


%SECTION pg_statsinfo

<p>
pg_statsinfoは日本で開発されているPostgreSQL専用の監視ツールです。
監視データをgraphicalに表示するpg_stats_reporterも開発されています。
</p>


<ul>
<li>pg_statsinfo</li>
<a href="http://pgstatsinfo.projects.pgfoundry.org/index.html">http://pgstatsinfo.projects.pgfoundry.org/index.html</a>
<li>pg_stats_reporter</li>
<a href="http://pgstatsinfo.projects.pgfoundry.org/pg_stats_reporter.html">http://pgstatsinfo.projects.pgfoundry.org/pg_stats_reporter.html</a>
</ul>


<p>
pg_stats_infoの特徴は4つあります。
第一に、多くのitemを監視していることです。
他のMonitorting softwareが監視しているitemに加えて、
WAL statisticsやFragmented Tableやreplication statusなど、
とても有用なitemsがサポートされています。
第二に、PostgreSQLだけでなくOSのactivity(cpu load, io, memory usage)も監視する統合monitoring softwareであることです。
pg_statsinfoはPostgreSQLを運用するための監視itemを全てカバー(cover)しています。
第３に、pg_stats_reporterというgraphical displayをするfront endがあることです。
そして最後に、pg_stats_infoはLinux専用のsoftwareであることです。
残念ながらLinux以外のOSでは稼働しません。
</p>

<p>
pg_statsinfoがカバーする監視itemsを以下に示します。
他のmonitoring softwareよりも詳細で有用なstatisticsを収集、表示できることがわかると思います。
</p>

<ul>
<li>All of the information collected by the statistics collector. For example, numbers of INSERT/UPDATE/DELETE and buffer access counters.</li>
<li>Disk usages of each tablespace, pg_xlog, and archive log directory.</li>
<li>Long transactions and their query strings.</li>
<li>Process status in running, waiting for locks, idles in transaction, and idle.</li>
<li>Amount of WAL output size.</li>
<li>Number of CHECKPOINT ,VACUUM execution time and access of buffers.</li>
<li>SQLs and functions that take long time.</li>
<li>PostgreSQL configuration parameters.</li>
<li>Lock information</li>
<li>Number of canceled queries which conflicts recovery</li>
<li>State fo replication</li>
<li>OS resource information(Usage of CPU, Memory, Disk I/O, Load Average)</li>
</ul>

<br>

<p>
pg_statsinfoとpg_stats_reporterは、これまで説明したmonitoring softwareと違い、構造が少し複雑です。
ここで、pg_statsinfoとpg_stats_reporterを理解するために、これらの構造を図解して、
動作の仕組みを解説することにします。
</p>

<table border=1>
<caption>[< fig 4-XX>] pg_statsinfo + pg_stats_reporter architecture<br></caption>
<tr><td>
<left>
<img src="./pg_statsinfo.jpg"  width="600" height="400"><br>
</left>
</td></tr></table>

<br>
<br>

<p>
監視データの保存場所から説明しましょう。
PostgreSQLのデータベースpostgresにstatsinfoというschemaがあり、
そのschemaに監視データ保存のためのいくつかのテーブルを作ります。
<br>
また、取得した(PostgreSQLの)沢山のstatisticsをそれらのテーブルに格納するfunctionsや、
それらのテーブルからデータを取得するfunctionsやviewsを定義します。
</p>

<p>
監視データを取得するのはpg_statsinfodというプロセスです。
pg_statsinfodプロセスが周期的に、
監視データを取得するためにfunctionsを実行したり、
OSのstatisticsをテーブルに書き込んだり、
取得した監視データのmaintenance(古いデータの削除など)を行います。
<br>
pg_statsinfodプロセスは、PostgreSQLの"statsinfo launcher"というbackendに制御(control)されていて、
PostgreSQLの起動と共にpgstatsinfodが起動されて、PostgreSQLの停止と共にpg_statsinfodも停止します。
</p>

<p>
データベースpostgresのstatsinfo schemaに保存された監視データは、
pg_statsinfoというクライアントsoftwareでPostgreSQLにアクセスすることで、取得(get)できます。
</p>

<p>
graphical front endであるpg_stats_reporterは、web serverからcallされて起動し、
pg_statsinfoのデータをgraphicalに整形してweb serverに渡します。
</p>



<table border=1>
<caption>[< fig 4-XX>] pg_statsinfo: WAL<br></caption>
<tr><td>
<left>
<img src="./pg_statsinfo-WAL.jpg"><br>
</left>
</td></tr></table>


<table border=1>
<caption>[< fig 4-XX>] pg_statsinfo: Fragmented tables<br></caption>
<tr><td>
<left>
<img src="./pg_statsinfo-FRAGMENTED-TABLES.jpg"><br>
</left>
</td></tr></table>

<br>
<br>


<p>
pg_statsinfoのインストール方法は多少煩雑なので、本書では説明を省略します。
Documentが完備しているので、是非使ってみることを勧めます。
</p>


<table border=1>
<caption>[< fig 4-XX>] pg_stats_reporter<br></caption>
<tr><td>
<left>
<img src="./pg_stats_reporter.jpg" width="640" height="400"><br>
</left>
</td></tr></table>




%CHAPTER Genral purpose monitoring and alerting software

<p>
現在、オープンソースのgeneral-purpose monitoring and alerting softwareが多数、リリースされています。
これらのmonitoring softwareは、CPUやメモリなどハードウエアのactivity、
ネットワークのトラフィック、DBMSを代表とするMiddle wareのstatisticsなど、
システム全体をモニタリングできるように作られています。
また、収集したactivityやstatisticsをpie chartやline chartによってgraphicalにdisplayできます。
</p>


<p>
ほとんどのopen source monitoring softwareは、
プラグインやテンプレートで監視項目を後から追加できます。
プラグインによる監視項目の拡張の仕組みを、簡単に説明します。
</p>



<table border=1>
<caption>[< fig 4-XX>] monitoring system's plugin architecture <br></caption>
<tr><td>
<left>
<img src="./monitoring_plugin.jpg"><br>
</left>
</td></tr></table>


<p>
プラグインやテンプレートのformatはmonitoring softwareに依存して異なりますが、
記述されている内容はほぼ同じです。
ここでは、PostgreSQLのdatabase activityをmonitorするプラグインを例にして説明します。
</p>

<p>
プラグインにはdatabase activityをmonitorするために、statistic view pg_stat_databaseをSELECTするqueryが書かれています。
monitoring softwareがPostgreSQLのdatabase activityを求める時は、
psql clientを使ってプラグインに記述されたqueryを実行して、
結果を得ます。
</p>


<p>
monitoring softwareがPostgreSQLからstatisticsを得るには、
psql clientを使ってstatistics viewやfunctionを求めるqueryを実行する以外にありません。
よって、monitoring softwareのプラグインの間に大きな違いは無く(There is no big difference between the plugins of them)、
ほとんど同じ監視項目が並んでいます(All monitoring softwares have almost the same monitoring items.)。
<br>
また、サポートされていない監視項目がある場合であっても、statistics view or/and functionを求めるqueryを作成することで、ユーザ自身が監視項目を追加できます。
</p>


<p>
以下に、いくつかの有名なmonitoring softwareを列挙します。
</p>

%SECTION Nagios

<ul>
<li><a href="http://www.nagios.org/">http://www.nagios.org/</a></li>
</ul>

<p>
NagiosはLinuxを含むUNIX系OS上で動作する、open sorce monitoring and alerting softwareです。
おそらく最も多く使われている監視システムでしょう。
PostgreSQLのためのいくつかのpluginが公開されていて、
それらをリストアップするサイトも存在します。
</p>

<ul>
<li><a href="http://exchange.nagios.org/directory/Plugins/Databases/PostgresQL">http://exchange.nagios.org/directory/Plugins/Databases/PostgresQL</a></li>
</ul>

<p>
これらの中で、最も多機能で最も多く使われているpluginは"check_postgres"です。
</p>

<ul>
<li><a href="http://exchange.nagios.org/directory/Plugins/Databases/PostgresQL/check_postgres/details">http://exchange.nagios.org/directory/Plugins/Databases/PostgresQL/check_postgres/details</a></li>
</ul>



%SECTION Cacti

<ul>
<li><a href="http://www.cacti.net/">http://www.cacti.net/</a></li>
</ul>

<p>
CactiはPHPで実装されたMonitoring softwareです。収集した監視データはRRDtoolに保存します。
Cactiは高機能であるにも関らず、Nagiosと比較して設定や管理が簡単です。
PostgreSQLのための、非常にすぐれたtemplateが公開されています。これはグラフ表示も含めて簡単に設定が可能です。
</p>

<ul>
<li><a href="https://github.com/palominodb/cacti-templates/blob/master/postgres/README.md">https://github.com/palominodb/cacti-templates/blob/master/postgres/README.md</a></li>
</ul>

<p>
Cactiは上に示したtemplateだけでなく、check_postgresなど、Nagiosのpluginも使えます。
</p>

<table border=1>
<caption>[< fig 4-XX>] cacti screen shot<br></caption>
<tr><td>
<left>
<img src="./cacti.jpg" width="640" height="400"><br>
</left>
</td></tr></table>



%SECTION Munin

<ul>
<li><a href="http://munin-monitoring.org/">http://munin-monitoring.org/</a></li>
</ul>

<p>
MuninはPerlで実装されたMonitoring softwareです。収集したデータは、Cactiと同じく、RRDtoolに保存します。
Muninはここで紹介したmonitoring softwareの中で最も設定や運用が簡単です。
<br>
Muninのプラグインは以下のURLにまとまっています。
</p>

<ul>
<li><a href="https://github.com/munin-monitoring/contrib/">https://github.com/munin-monitoring/contrib/</a></li>
</ul>

<p>
PostgreSQLのためのpluginは以下のURLからダウンロードできます。
</p>

<ul>
<li><a href="https://github.com/munin-monitoring/contrib/tree/master/plugins/postgresql">https://github.com/munin-monitoring/contrib/tree/master/plugins/postgresql</a></li>
</ul>


<p>
他のmoniroting softwareと比較して、muninのPostgreSQLのためのpluginの数が少ないです、
しかしmuninのpluginのフォーマットはとてもsimpleなので、簡単に新しいpluginを実装できると思います。
</p>

<table border=1>
<caption>[< fig 4-XX>] munin screen shot<br></caption>
<tr><td>
<left>
<img src="./munin.jpg" width="640" height="400"><br>
</left>
</td></tr></table>


%SECTION Zabbix

<ul>
<li><a href="http://www.zabbix.com/">http://www.zabbix.com/</a></li>
</ul>

<p>
ZabbixはC言語で実装されたalerting and monitoring softwareで、
特にalerting機能がより充実していて、alertを出す複雑な条件を設定できます。
<br>
しかし、Zabbixのmoniroting機能には大きな制約があります。
その制約とは、監視項目(item)毎に1データしか取得できないということです。
例えばstatictics viewのデータを一度に収集することは困難です。
そのため、ZabbixはPostgreSQLのmonitoringにはあまり適していません。
ZabbixはPostgreSQLのalert機能だけを利用して、monitoringはpg_statsinfoを使うなど、
役割分担をして他のmonitoring softwareと併用すると良いでしょう。
<br>
Zabbix用のPostgreSQL監視テンプレートは、以下のURLに示すpg_monzが公開されています。
</p>


<ul>
<li><a href="http://pg-monz.github.io/pg_monz/index-en.html">http://pg-monz.github.io/pg_monz/index-en.html</a></li>
</ul>


%SECTION Ganglia

<ul>
<li><a href="http://ganglia.info/">http://ganglia.info/</a></li>
</ul>

<p>
Gangliaはopen source monitoring softwareの一つですが、
他のopen source monitoring softwareと異なり、
clusterやGridのようなhigh-performance computingのためのdistributed monitoring softwareです。
数100台から数1000台のnodesを管理することができます。
</p>

<p>
GangliaのためのPostgreSQL用moduleは、以下のURLからダウンロードできます。
</p>

<ul>
<li><a href="https://github.com/mentalblock/ganglia_postgresql">https://github.com/mentalblock/ganglia_postgresql</a></li>
</ul>

