%FILE internal/admin-14.html
%LASTMOD
%KEY pgsql-admin14

%TITLE 保守、監視とチューニング

<p>
日常的な運用管理作業について概略を示します。詳細は以降で解説します。
</p>


<p>
運用全般については以下の資料が参考になります。
</p>

<table>
<tr bgcolor="#cccccc"><th>資料</th>	<th>著者</th> <th>リンク</th>
</tr><tr>
<td>PostgreSQL運用テクニック</td>	<td>笠原辰仁、坂本昌彦</td> <td>http://bit.ly/LA6HhR</td>
</tr></table>

<br>


%CHAPTER 保守

<p>
PostgreSQLの運用に必須の保守項目を示します([<表3-08>])。
</p>

<table>
<caption>[<表3-08>]必須の保守項目</caption>
<tr bgcolor="#cccccc">
<th>処理　　　　　　</th>			<th>説明　　　　　　　　　　　</th>
</tr><tr>
<td>VACUUM</td>			<td>不要なタプルの回収とFSMの更新。バージョン8.1以降、AUTOVACUUMで自動実行</td>
</tr><tr>
<td>ANALYZE</td>		<td>統計情報の更新。バージョン8.1以降、AUTOVACUUMで自動実行</td>
</tr><tr>
<td>VACUUM FULL</td>		<td>大量のデータを削除した場合に実行。テーブルファイルサイズを削減できる</td>
</tr><tr>
<td>アーカイブログの削除</td>	<td>アーカイブログは明示的に削除しなければ、際限なく増えていく</td>
</tr></table>

<br>

<p>
バージョン8.1で導入されたAUTOVACUUMによって、それまでPostgreSQLの運用上大きな欠点であったVACUUM処理が自動で行われるようになりました。
ANALYZEによる統計情報更新も行うので、日常的な保守はほぼすべてAUTOVACUUMに任せることができます。
</p>

<p>
バージョン8.0以前のPostgreSQLならば、vacuumdbコマンドをcronで定期実行して保守します。しかしバージョン8.1以降は性能向上も著しいので、バージョンアップすべきです。
</p>

<p>
・アーカイブログの削除
<br>
アーカイブログは際限なく増えていきます。
「定期的にベースバックアップを保存し、以前のアーカイブログを削除」してください。
<br>
古いアーカイブログをまとめて削除するツールpg_archivecleanupについて、
[<3-21>]で解説します。
</p>


%CHAPTER 監視


<p>
PostgreSQLやサーバの稼働状態を監視する手法を示します。
</p>

%SECTION 稼働統計情報

<p>
PostgreSQLはサーバ内部に稼働統計情報([<3-15>]参照)を記録保存します。
<br>
稼働統計情報を定期的に収集し、集計するツールがいくつか公開されています。本書は[<3-17>]でpgstatspackを紹介します。
</p>

<table border=1><tr bgcolor="#cccccc">
<th rowspan=2>ツール名</th>	<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th>サイト</th>
</tr><tr>
<td rowspan=2>pgstatspack</td>	<td>稼働統計情報をPostgreSQL内部のテーブルに保存する。情報の定期的な取得にはcronを利用する。</td>
</tr><tr>
<td bgcolor="#eeeeee">http://pgfoundry.org/projects/pgstatspack</td>
</tr><tr>
 <td rowspan=2>pg_statsinfo</td>	<td>pg_statsinfodというデーモンプロセスが稼働統計情報を取得する。高機能であるが設定が繁雑である。情報の集計結果をグラフィカルに表示するpg_reporterも公開されている。</td>
</tr><tr>
<td rowspan="#eeeeee">http://pgstatsinfo.projects.postgresql.org/pg_statsinfo-ja.html</td>
</tr></table>

<br>

%SECTION ログ

<p>
PostgreSQLは実行ログをファイルに書き出します。
PostgreSQLが独自に管理するログファイルに書き出すこともできるし、syslogに書き出すこともできます。
設定方法は[<3-16>]参照してください。
</p>


%SECTION OSの稼働情報

<p>
HDDアクセスやCPUの負荷など、OSの稼働情報もRDBMSの運用管理に必要な情報です。多くのツールやコマンドが用意されています。本書は[<3-17>]でsysstatを紹介します。
</p>

<table border=1><tr bgcolor="#cccccc">
<th rowspan=2>ツール名</th>	<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th>サイト</th>
</tr><tr>
  <td>iostat, vmstat</td>	<td>UNIX系OSならば必ず付属するコマンドである(MacOSXはvm_stat)。特にiostatのディスクI/Oは継続的にモニタリングすべきデータである。</td>
</tr><tr>
  <td rowspan=2>sysstat	</td>		<td>sysstatはUNIX系OSのシステム情報を収集、分析するツール群である。
収集するデータの範囲も広く、結果の集計コマンドも充実しているので、sysstatがサポートされたUNIX系OSを運用するなら常備すべきである。</td>
</tr><tr>		<td>http://sebastien.godard.pagesperso-orange.fr/</td>
</tr><tr>
  <td rowspan=2>nagios</td>	<td>OSだけでなく、各種プラグインでPostgreSQLはじめ様々なアプリケーションのモニタリングが可能なシステムである。
デーモンプロセスとして稼働し、結果はhttpサーバでグラフィカルに表示できる。数100台規模のサーバのモニタリングも可能である。</td>
</tr><tr>
<td>http://www.nagios.org/</td>
</tr></table>

<br>


%CHAPTER チューニング

<p>
[<3-18>]でログや稼働統計情報の分析方法、[<3-19>]でパラメータチューニングについて簡単に説明します。
<br>
詳細は以下の書籍、もしくは資料を参照してください。
</p>

<table>
<tr bgcolor="#cccccc"><th>書名</th>	<th>著者</th>   <th>リンク</th>
</tr><tr>
<td>PostgreSQL 9.0 High Performance</td>	<td>Gregory Smith</td> <td>http://www.packtpub.com/postgresql-90-high-performance/book</td>
</tr><tr>
<td>PostgreSQL 9 Admin Cookbook</td>	<td>Simon Riggs, Hannu Krosing</td> <td>http://www.packtpub.com/postgresql-9-admin-cookbook/book</td>
</tr><tr>
<tr bgcolor="#cccccc"><th>資料</th>	<th>著者</th> <th>リンク</th>
</tr><tr>
<td>PostgreSQLのチューニング技法</td>	<td>笠原辰仁、 他</td> <td>https://www.postgresql.jp/events/pgcon09j/doc/b2-3.pdf</td>
</tr><tr>
<td>稼動統計情報を活用しよう(2)</td>	<td>笠原辰仁</td> <td>http://lets.postgresql.jp/documents/technical/statistics/2</td>
</tr></table>

<br>


<blockquote><table BORDER="1"><tr><td>コラム3-1:HDDのレイアウト</td><td>

<p>
ハードウエアは本書のスコープ外ですが、HDDのレイアウトについて簡単に触れます。
</p>

<p>
PostgreSQLを稼働するサーバのHDDは、
WALログを書き込むHDDとデータベースクラスタを配置するHDDを分離すべきです。
<br>
理由は大別して２つあります。
</p>

<ul>
<li>性能の観点から</li>

<p>
WALの書き込みとCHECKPOINTなどでのdirtyページの書き込みが混在すると、
HDDのヘッドが頻繁に動くことになります。
よってHDDのI/Oがボトルネックとなってデータベースの性能低下を引き起こす可能性があります。
<br>
このような事態を避けるには、
HDDのヘッドがほとんど動かずシーケンシャルにWALログを書き込める環境を用意する以外にありません。
</p>

<li>耐障害性の観点から</li>

<p>
ベースバックアップとアーカイブログが安全に保管されていることが前提ですが、
万が一データベースクラスタのHDDが物理的に壊れても、WALログがあればリカバリできます。
<br>
[<3-20>]の[<コラム3-3>]「ハードウエアによる耐障害性と高可用性の確保」も参照してください。
</p>

</ul>

</td></tr></table></blockquote>
